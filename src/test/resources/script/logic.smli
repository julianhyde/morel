(*
 * Licensed to Julian Hyde under one or more contributor license
 * agreements.  See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Julian Hyde licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License.  You may obtain a
 * copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.  See the License for the specific
 * language governing permissions and limitations under the
 * License.
 *
 * Tests for logical expressions.
 *)

(* == Implies ========================================== *)
false implies false;
> val it = true : bool
false implies true;
> val it = true : bool
true implies false;
> val it = false : bool
true implies true;
> val it = true : bool

(* All departments are not department 30 or are called
   "SALES". *)
from d in scott.dept
  where d.deptno = 30 implies d.dname = "SALES";
> val it =
>   [{deptno=10,dname="ACCOUNTING",loc="NEW YORK"},
>    {deptno=20,dname="RESEARCH",loc="DALLAS"},
>    {deptno=30,dname="SALES",loc="CHICAGO"},
>    {deptno=40,dname="OPERATIONS",loc="BOSTON"}]
>   : {deptno:int, dname:string, loc:string} list

(* Three departments are not department 30 or are called
   "RESEARCH". *)
from d in scott.dept
  where d.deptno = 30 implies d.dname = "RESEARCH";
> val it =
>   [{deptno=10,dname="ACCOUNTING",loc="NEW YORK"},
>    {deptno=20,dname="RESEARCH",loc="DALLAS"},
>    {deptno=40,dname="OPERATIONS",loc="BOSTON"}]
>   : {deptno:int, dname:string, loc:string} list

(* == Exists =========================================== *)

(* Exists in a lambda. *)
val g = fn f => exists i in [1, 2, 3] where f i;
> val g = fn : (int -> bool) -> bool
g (fn i => i mod 2 = 0);
> val it = true : bool
g (fn i => i mod 5 = 0);
> val it = false : bool

(* Exists with a join in a lambda. *)
val g2 = fn f => exists i in [1, 2, 3] join j in [3, 4] on f (i, j);
> val g2 = fn : (int * int -> bool) -> bool
g2 (fn (i, j) => j - i = 2);
> val it = true : bool

(* As previous, but with a spurious 'yield' step. *)
val g3 = fn f => exists i in [1, 2, 3] join j in [3, 4] on f (i, j) yield i + j;
> val g3 = fn : (int * int -> bool) -> bool
g3 (fn (i, j) => j - i = 2);
> val it = true : bool

(* Empty 'exists' iterates over zero variables, a collection
   that contains one instance of the unit tuple, hence
   returns true. *)
exists;
> val it = true : bool
not exists;
> val it = false : bool

(* Empty 'exists' with 'where'. *)
exists where true;
> val it = true : bool
exists where false;
> val it = false : bool
not exists where false;
> val it = true : bool

exists e in scott.emps where e.deptno = 20 into sum;
> stdIn:2.44-2.52 Error: 'into' step must not occur in 'exists'
>   raised at: stdIn:2.44-2.52

exists e in scott.emps where e.deptno = 20 compute min of e.job;
> stdIn:2.44-2.64 Error: 'compute' step must not occur in 'exists'
>   raised at: stdIn:2.44-2.64

(*) End logic.smli
