(*
 * Licensed to Julian Hyde under one or more contributor license
 * agreements.  See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Julian Hyde licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License.  You may obtain a
 * copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.  See the License for the specific
 * language governing permissions and limitations under the
 * License.
 *
 * Tests for operator overloading.
 *)
Sys.set ("lineWidth", 78);
> val it = () : unit
Sys.set ("printLength", 64);
> val it = () : unit
Sys.set ("stringDepth", ~1);
> val it = () : unit

(* Example based on "A Second Look at Overloading" by Martin Odersky, Philip
 * Wadler, Martin Wehr (1995). *)
over first;
> over first
over second;
> over second
over third;
> over third

val inst first = fn (x, y) => x;
> val first = fn : 'a * 'b -> 'a
val inst second = fn (x, y) => y;
> val second = fn : 'a * 'b -> 'b

val inst first = fn (x, y, z) => x;
> val first = fn : 'a * 'b * 'c -> 'a
val inst second = fn (x, y, z) => y;
> val second = fn : 'a * 'b * 'c -> 'b
val inst third = fn (x, y, z) => z;
> val third = fn : 'a * 'b * 'c -> 'c

val demo = fn r => (second r, first r);
> val demo = fn : 'a * 'b * 'c -> 'b * 'a
(* Should be:
> val demo = fn : (first : 'a -> 'b, second : 'a -> 'c) => 'a -> ('c, 'b)
*)
demo (3,"four",5);
> val it = ("four",3) : string * int

(* This should also work:
demo (3,"four");
> val it = ("four",3) : string * int
*)

(*) End overload.smli
