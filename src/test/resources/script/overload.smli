(*
 * Licensed to Julian Hyde under one or more contributor license
 * agreements.  See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Julian Hyde licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License.  You may obtain a
 * copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.  See the License for the specific
 * language governing permissions and limitations under the
 * License.
 *
 * Tests for operator overloading.
 *)
Sys.set ("lineWidth", 78);
> val it = () : unit
Sys.set ("printLength", 64);
> val it = () : unit
Sys.set ("stringDepth", ~1);
> val it = () : unit

(* Example based on "A Second Look at Overloading" by Martin Odersky, Philip
 * Wadler, Martin Wehr (1995). *)
over first;
> over first
over second;
> over second
over third;
> over third

(*
inst first = fn (x, y) -> x;
inst second = fn (x, y) -> y;

inst first = fn (x, y, z) -> x;
inst second = fn (x, y, z) -> y;
inst third = fn (x, y, z) -> z;

val demo = fn r -> (second r, first r)
> val demo = fn : (first : 'a -> 'b, second : 'a -> 'c) => 'a -> ('c, 'b)
*)

(*) End overload.smli
