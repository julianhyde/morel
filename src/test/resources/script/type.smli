(*
 * Licensed to Julian Hyde under one or more contributor license
 * agreements.  See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Julian Hyde licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License.  You may obtain a
 * copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.  See the License for the specific
 * language governing permissions and limitations under the
 * License.
 *)

(*) Record and tuple are equivalent.
{1 = "a", 2 = true};
> val it = ("a",true) : string * bool
("a", true);
> val it = ("a",true) : string * bool
("a", true) = {1 = "a", 2 = true};
> val it = true : bool
{1 = "a", 2 = true} = ("a", true);
> val it = true : bool
("a", true) = {2 = true, 1 = "a"};
> val it = true : bool
("a", true) = {2 = true, 1 = "b"};
> val it = false : bool
("a", false) = {1 = "a", 2 = true};
> val it = false : bool

(*) Empty record and empty tuple are equivalent, and of type 'unit'.
{};
> val it = () : unit
();
> val it = () : unit
{} = ();
> val it = true : bool
() = {};
> val it = true : bool

(*) Expressions with type annotations
1: int;
> val it = 1 : int
(2, true): int * bool;
> val it = (2,true) : int * bool
[]: int list;
> val it = [] : int list
(1: int) + (2: int);
> val it = 3 : int
1 + (2: int);
> val it = 3 : int
(1: int) + 2;
> val it = 3 : int
String.size "abc": int;
> val it = 3 : int
String.size ("abc": string);
> val it = 3 : int
String.size ("abc": string): int;
> val it = 3 : int

(*) Patterns with type annotations
val x: int = 1;
> val x = 1 : int
val y: bool = true;
> val y = true : bool
val p: int * bool = (1, true);
> val p = (1,true) : int * bool
val empty: int list = [];
> val empty = [] : int list

(*) Function declarations with type annotations
fun f (x: int, y) = x + y;
> val f = fn : int * int -> int
fun f (x, y: int) = x + y;
> val f = fn : int * int -> int
fun f3 (e: {name: string, deptno:int}) = e.deptno;
> val f3 = fn : {deptno:int, name:string} -> int
fun hello (name: string, code: int): string = "hello!";
> val hello = fn : string * int -> string
fun hello2 (name: string) (code : int): string = "hello!";
> val hello2 = fn : string -> int -> string
val hello3: string * int -> string =
  fn (name, code) => "hello!";
> val hello3 = fn : string * int -> string
fun l1 [] = 0 | l1 ((h: string) :: t) = 1 + (l1 t);
> val l1 = fn : string list -> int
fun l2 [] = 0 | l2 (h :: (t: bool list)) = 1 + (l2 t);
> val l2 = fn : bool list -> int
fun countOption (NONE: string option) = 0
  | countOption (SOME x) = 1;
> val countOption = fn : string option -> int
fun countOption0 (NONE) = 0
  | countOption0 (SOME x) = if x = "" then 1 else 2;
> val countOption0 = fn : string option -> int
fun countOption00 (SOME x) = 1
  | countOption00 (NONE: string option) = 0;
> val countOption00 = fn : string option -> int
fun countOption1 (NONE) = 0
  | countOption1 (SOME x) = if x then 1 else 2;
> val countOption1 = fn : bool option -> int
fun countOption2 NONE: int = 0
  | countOption2 (SOME x) = 1;
> val countOption2 = fn : 'a option -> int
fun firstOrSecond (e1 :: e2 :: rest): int = e2
  | firstOrSecond (e1 :: rest) = e1;
> 0.0-0.0 Warning: match nonexhaustive
>   raised at: 0.0-0.0
> val firstOrSecond = fn : int list -> int

(*
sml-nj gives the following error:
stdIn:1.6-2.32 Error: parameter or result constraints of clauses don't agree [tycon mismatch]
  this clause:      'Z option -> string list
  previous clauses:      'Z option -> int list
  in declaration:
    f = (fn NONE => nil: int list
          | SOME x => nil: string list)
*)
fun f NONE:int list = []
  | f (SOME x):string list = [];
> stdIn:11.5-12.32 Error: parameter or result constraints of clauses don't agree [tycon mismatch]
>   raised at: stdIn:11.5-12.32

(*) Function with unit arg
fun one () = 1;
> val one = fn : unit -> int
one ();
> val it = 1 : int
one {};
> val it = 1 : int
let
  fun one () = 1
in
  one ()
end;
> val it = 1 : int

(*) A function with a type that is tricky to unparse correctly:
(*)   'a list -> ('a * 'a list) option
fun g [] = NONE
  | g (h :: t) = SOME (h, t);
> val g = fn : 'a list -> ('a * 'a list) option

(*) Ditto:
(*)   'a list -> ('a * 'a list option) option
fun g [] = NONE
  | g (h :: t) = SOME (h, SOME t);
> val g = fn : 'a list -> ('a * 'a list option) option

(*) Ditto:
(*)   'a list -> ('a option * 'a list option) option
fun g [] = NONE
  | g (h :: t) = SOME (SOME h, SOME t);
> val g = fn : 'a list -> ('a option * 'a list option) option

(*) Pattern-match on record
fun f {a = c, b} = b + c;
> val f = fn : {a:int, b:int} -> int
f {a = 5, b = 6};
> val it = 11 : int

fun f2 {a = 1, b} = b * 2
  | f2 {a, b} = b * 3;
> val f2 = fn : {a:int, b:int} -> int
f2 {a = 1, b = 6};
> val it = 12 : int
f2 {a = 2, b = 6};
> val it = 18 : int

Sys.set ("matchCoverageEnabled", false);
> val it = () : unit
fun f3 {a = 1, b} = b * 2;
> val f3 = fn : {a:int, b:int} -> int
Sys.unset "matchCoverageEnabled";
> val it = () : unit
f3 {a = 1, b = 6};
> val it = 12 : int

(*) The following correctly throws
(*)   unbound variable or constructor: a
(*) Disabled because error stacks made tests brittle.
(*) fun f4 {a = 1, b} = a + b;

(*) Variable with polymorphic type
val x = map;
> val x = fn : ('a -> 'b) -> 'a list -> 'b list
x explode ["ab", "c"];
> val it = [[#"a",#"b"],[#"c"]] : char list list

(*) Has polymorphic type
val rec len = fn x =>
    case x of head :: tail => 1 + (len tail)
            | [] => 0;
> val len = fn : 'a list -> int

len [];
> val it = 0 : int
len [1];
> val it = 1 : int
len [1,2];
> val it = 2 : int

map len (map explode ["ab", "", "cde"]);
> val it = [2,0,3] : int list
map (fn s => len (explode s)) ["ab", "", "cde"];
> val it = [2,0,3] : int list

(*) Type resolution involving record selectors
val emps =
  [{id = 100, name = "Fred", deptno = 10},
   {id = 101, name = "Velma", deptno = 20},
   {id = 102, name = "Shaggy", deptno = 30},
   {id = 103, name = "Scooby", deptno = 30}];
> val emps =
>   [{deptno=10,id=100,name="Fred"},{deptno=20,id=101,name="Velma"},
>    {deptno=30,id=102,name="Shaggy"},{deptno=30,id=103,name="Scooby"}]
>   : {deptno:int, id:int, name:string} list
map #deptno emps;
> val it = [10,20,30,30] : int list
map #deptno (List.filter (fn e => #deptno e > 10) emps);
> val it = [20,30,30] : int list
map #2 [(1,2),(3,1)];
> val it = [2,1] : int list
List.filter #1 [(true,1),(false,2),(true,3)];
> val it = [(true,1),(true,3)] : (bool * int) list
map #2 (List.filter #1 [(true,1),(false,2),(true,3)]);
> val it = [1,3] : int list

(*) Should give
(*)  Error: duplicate variable in pattern(s): e
(*
fun in_ e [] = false
  | in_ e e :: tl = true
  | in_ e hd :: tl = in_ e tl
*)

(*) Should give
(*) Error: operator and operand don't agree [tycon mismatch]
(*)     operator domain: 'Z list list
(*)     operand:         (({id:'X; 'Y} -> 'X) * ([+ ty] * [+ ty] -> [+ ty])) list
(*)     in expression:
(*)       aggregate (((fn <pat> => <exp>),sum) :: nil)
(*
let
  fun foldl f start [] = start
    | foldl f start (hd :: tl) = foldl f (f (start, hd)) tl;
  fun map f [] = []
    | map f (hd :: tl) = (f hd) :: (map f tl);
  fun computeAgg (extractor, folder) list =
      foldl folder (map extractor list);
  fun aggregate aggFns list =
      map (computeAgg list) aggFns;
  fun sum (x, y) = x + y;
in
  aggregate [(#id, sum)] emps
end;
*)

(*) Lambda applied to datatype
fn LESS => ~1
 | EQUAL => 0
 | GREATER => 1;
> val it = fn : order -> int

(*) Lambda with record argument
fn {a, b} => if b then a else a + 1;
> val it = fn : {a:int, b:bool} -> int

(*) Record containing polymorphic functions:
(*)  val it = {a=fn,b=fn}
(*) : {a:'a list -> ('a * 'a list) option, b:'b list -> ('b * 'b list) option}
{a = fn x => case x of [] => NONE | (h :: t) => SOME (h, t),
 b = fn x => case x of [] => NONE | (h :: t) => SOME (h, t)};
> val it = {a=fn,b=fn}
>   : {a:'a list -> ('a * 'a list) option, b:'b list -> ('b * 'b list) option}

(*) Similar, expressed via 'fun'.
(* sml/nj gives:
stdIn:1.2-1.66 Warning: type vars not generalized because of
   value restriction are instantiated to dummy types (X1,X2,...)
val it = {a=1,b=fn} : {a:int, b:?.X1 list -> (?.X1 * ?.X1 list) option}
*)
let
  fun g [] = NONE
    | g (h :: t) = SOME (h, t)
in
  {a=1, b=g}
end;
> val it = {a=1,b=fn} : {a:int, b:'a list -> ('a * 'a list) option}

(*) as above
{a = 1, b = let fun g [] = NONE | g (h :: t) = SOME (h, t) in g end};
> val it = {a=1,b=fn} : {a:int, b:'a list -> ('a * 'a list) option}

(*) List of monotype
[SOME true, NONE];
> val it = [SOME true,NONE] : bool option list
[SOME [1, 2], NONE];
> val it = [SOME [1,2],NONE] : int list option list
[NONE, SOME [{a=1,b=true}], NONE];
> val it = [NONE,SOME [{a=1,b=true}],NONE] : {a:int, b:bool} list option list
from b in [SOME true, NONE];
> val it = [SOME true,NONE] : bool option list

(*) If a function type is spread over several lines, put '->' at the start of
(*) the next line.
val f : ('a -> (int * int) list) -> ('a -> (int * int) list) -> 'a -> (int * int) list = fn a => fn b => fn c => [];
> val f = fn
>   : ('a -> (int * int) list)
>     -> ('b -> (int * int) list) -> 'c -> (int * int) list

(* SML/NJ output for previous is as follows. TODO match SML/NJ type variables.
> val f = fn
>   : ('a -> (int * int) list)
>     -> ('a -> (int * int) list) -> 'a -> (int * int) list
*)

(*) Function with tuple type and lots of type variables returns record type.
(*) Note that after 'z, type variables are 'ba, 'bb, etc.
(*) Also note that 'o' needs to be quoted.
fun r0 (a, b, c, d, e, f, g, h, i, j, k, l, m, n, `o`, p, q, r, s, t, u, v, w, x, y, z, aa, ab, ac) = {a=a,b=b,c=c};
> val r0 = fn
>   :
>     'a * 'b * 'c * 'd * 'e * 'f * 'g * 'h * 'i * 'j * 'k * 'l * 'm * 'n * 'o *
>     'p * 'q * 'r * 's * 't * 'u * 'v * 'w * 'x * 'y * 'z * 'ba * 'bb * 'bc
>     -> {a:'a, b:'b, c:'c}

(*) Highly curried function with lots of type variables returns record type.
fun r0 a b c d e f g h i j k l m n p q r s = {a=a,b=b,c=c};
> val r0 = fn
>   : 'a
>     -> 'b
>        -> 'c
>           -> 'd
>              -> 'e
>                 -> 'f
>                    -> 'g
>                       -> 'h
>                          -> 'i
>                             -> 'j
>                                -> 'k
>                                   -> 'l
>                                      -> 'm
>                                         -> 'n
>                                            -> 'o
>                                               -> 'p
>                                                  -> 'q
>                                                     -> 'r -> {a:'a, b:'b, c:'c}

(*) When printing a type, 'forall' is omitted. Sometimes that eliminates
(*) type variables. The following tests make sure that type variables are
(*) contiguous and numbered left-to-right.
[[], []];
> val it = [[],[]] : 'a list list
let val r = {a=[], b=[]} in r.b end;
> val it = [] : 'a list
fun f (a, b, c) = {x=c, y=a};
> val f = fn : 'a * 'b * 'c -> {x:'c, y:'a}

(* An expression whose type is complicated to infer. *)
fun f1 x = x;
> val f1 = fn : 'a -> 'a
fun f2 x = f1 (f1 x);
> val f2 = fn : 'a -> 'a
fun f3 x = f2 (f2 x);
> val f3 = fn : 'a -> 'a
fun f4 x = f3 (f3 x);
> val f4 = fn : 'a -> 'a
fun f5 x = f4 (f4 x);
> val f5 = fn : 'a -> 'a
fun f6 x = f5 (f5 x);
> val f6 = fn : 'a -> 'a
fun f7 x = f6 (f6 x);
> val f7 = fn : 'a -> 'a
fun f8 x = f7 (f7 x);
> val f8 = fn : 'a -> 'a
fun f9 x = f8 (f8 x);
> val f9 = fn : 'a -> 'a
fun f10 x = f9 (f9 x);
> val f10 = fn : 'a -> 'a
fun g y =
  let
    val a = f10 (fn z => z)
    val b = f10 (fn z => (z, z))
    val c = f10 (fn z => if true then z else y)
    val d = f10 (fn z => f10 z)
  in
    (a, b, c, d)
  end;
> val g = fn : 'a -> ('b -> 'b) * ('c -> 'c * 'c) * ('a -> 'a) * ('d -> 'd)

(* Should be able to derive type, but cannot. A bug.
   Moving 'fun f1' outside the 'let' solves the problem.
fun g2 y =
  let
    fun f1 x = x
    val a = f1 (fn w => w)
    val b = f1 (fn z => (z, z))
  in
    (a, b)
  end;
> val g2 = fn : 'a -> ('b -> 'b) * ('c -> 'c * 'c)
*)

(* Identity function, and chain functions that apply the identity
   function multiple times. *)
fun id x = x;
> val id = fn : 'a -> 'a
fun chain0 f = f;
> val chain0 = fn : 'a -> 'a
fun chain1 f = fn x => f (id x);
> val chain1 = fn : ('a -> 'b) -> 'a -> 'b
fun chain2 f = fn x => f (id (id x));
> val chain2 = fn : ('a -> 'b) -> 'a -> 'b
fun chain3 f = fn x => f (id (id (id x)));
> val chain3 = fn : ('a -> 'b) -> 'a -> 'b
fun chain4 f = fn x => f (id (id (id (id x))));
> val chain4 = fn : ('a -> 'b) -> 'a -> 'b
fun chain5 f = fn x => f (id (id (id (id (id x)))));
> val chain5 = fn : ('a -> 'b) -> 'a -> 'b
fun chain6 f = fn x => f (id (id (id (id (id (id x))))));
> val chain6 = fn : ('a -> 'b) -> 'a -> 'b
fun chain7 f = fn x => f (id (id (id (id (id (id (id x)))))));
> val chain7 = fn : ('a -> 'b) -> 'a -> 'b
fun chain8 f = fn x => f (id (id (id (id (id (id (id (id x))))))));
> val chain8 = fn : ('a -> 'b) -> 'a -> 'b
fun chain9 f = fn x => f (id (id (id (id (id (id (id (id (id x)))))))));
> val chain9 = fn : ('a -> 'b) -> 'a -> 'b
fun chain10 f = fn x => f (id (id (id (id (id (id (id (id (id (id x))))))))));
> val chain10 = fn : ('a -> 'b) -> 'a -> 'b
fun chain11 f = fn x => f (id (id (id (id (id (id (id (id (id (id (id x)))))))))));
> val chain11 = fn : ('a -> 'b) -> 'a -> 'b
fun chain12 f = fn x => f (id (id (id (id (id (id (id (id (id (id (id (id x))))))))))));
> val chain12 = fn : ('a -> 'b) -> 'a -> 'b
fun chain13 f = fn x => f (id (id (id (id (id (id (id (id (id (id (id (id (id x)))))))))))));
> val chain13 = fn : ('a -> 'b) -> 'a -> 'b
fun chain14 f = fn x => f (id (id (id (id (id (id (id (id (id (id (id (id (id (id x))))))))))))));
> val chain14 = fn : ('a -> 'b) -> 'a -> 'b
fun chain15 f = fn x => f (id (id (id (id (id (id (id (id (id (id (id (id (id (id (id x)))))))))))))));
> val chain15 = fn : ('a -> 'b) -> 'a -> 'b
fun chain16 f = fn x => f (id (id (id (id (id (id (id (id (id (id (id (id (id (id (id (id x))))))))))))))));
> val chain16 = fn : ('a -> 'b) -> 'a -> 'b
fun chain17 f = fn x => f (id (id (id (id (id (id (id (id (id (id (id (id (id (id (id (id (id x)))))))))))))))));
> val chain17 = fn : ('a -> 'b) -> 'a -> 'b
fun chain18 f = fn x => f (id (id (id (id (id (id (id (id (id (id (id (id (id (id (id (id (id (id x))))))))))))))))));
> val chain18 = fn : ('a -> 'b) -> 'a -> 'b
fun chain19 f = fn x => f (id (id (id (id (id (id (id (id (id (id (id (id (id (id (id (id (id (id (id x)))))))))))))))))));
> val chain19 = fn : ('a -> 'b) -> 'a -> 'b
fun chain20 f = fn x => f (id (id (id (id (id (id (id (id (id (id (id (id (id (id (id (id (id (id (id (id x))))))))))))))))))));
> val chain20 = fn : ('a -> 'b) -> 'a -> 'b

(* Helper functions for creating more complex type constraints. *)
fun apply f x = f x;
> val apply = fn : ('a -> 'b) -> 'a -> 'b
fun compose f g x = f (g x);
> val compose = fn : ('a -> 'b) -> ('c -> 'a) -> 'c -> 'b
fun flip f x y = f y x;
> val flip = fn : ('a -> 'b -> 'c) -> 'b -> 'a -> 'c
fun fst (x, _) = x;
> val fst = fn : 'a * 'b -> 'a
fun snd (_, y) = y;
> val snd = fn : 'a * 'b -> 'b

(* Data structures for creating diverse type constraints. *)
datatype ('a, 'b) either = LEFT of 'a | RIGHT of 'b;
> datatype ('a,'b) either = LEFT of 'a | RIGHT of 'b
datatype 'a tree = LEAF of 'a | NODE of 'a tree * 'a * 'a tree;
> datatype 'a tree = LEAF of 'a | NODE of 'a tree * 'a * 'a tree

(* Function that creates a quadratic unification case. *)
fun quadratic_case () =
  let
    val f0 = chain0 (fn x => x)
    val f1 = chain1 (fn x => (x, x))
    val f2 = chain2 (fn x => [x])
    val f3 = chain3 (fn x => SOME x)
    val f4 = chain4 (fn x => (x, x, x))
    val f5 = chain5 (fn x => fn y => (x, y))
    val f6 = chain6 (fn x => {field = x})
    val f7 = chain7 (fn x => if true then x else x)
    val f8 = chain8 (fn x => apply (fn y => (x, y)) x)
    val f9 = chain9 (fn x => apply (fn y => apply (fn z => (x, y, z)) y) x)
    val f10 = chain10 (fn x => LEAF x)
    val f11 = chain11 (fn x => NODE (LEAF x, x, LEAF x))
    val f12 = chain12 (fn x => LEFT x)
    val f13 = chain13 (fn x => RIGHT x)
    val f14 = chain14 (fn x => compose (fn y => (x, y)) (fn z => (z, x)))
    val f15 = chain15 (fn x => flip (fn a => fn b => (a, b, x)) x)
    val f16 = chain16 (fn x => fn y => fn z => (x, y, z))
    val f17 = chain17 (fn x => fn y => fst (x, y))
    val f18 = chain18 (fn x => fn y => snd (x, y))
    val f19 = chain19 (fn x => fn f => f x)
    val f20 = chain20 (fn x => fn f => fn g => compose f g x)
  in
    (f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20)
  end;
> val quadratic_case = fn
>   : unit
>     -> ('a -> 'a) * ('b -> 'b * 'b) * ('c -> 'c list) * ('d -> 'd option) *
>        ('e -> 'e * 'e * 'e) * ('f -> 'g -> 'f * 'g) * ('h -> {field:'h}) *
>        ('i -> 'i) * ('j -> 'j * 'j) * ('k -> 'k * 'k * 'k) * ('l -> 'l tree) *
>        ('m -> 'm tree) * ('n -> ('n,'o) either) * ('p -> ('q,'p) either) *
>        ('r -> 's -> 'r * ('s * 'r)) * ('t -> 'u -> 'u * 't * 't) *
>        ('v -> 'w -> 'x -> 'v * 'w * 'x) * ('y -> 'z -> 'y) *
>        ('ba -> 'bb -> 'bb) * ('bc -> ('bc -> 'bd) -> 'bd) *
>        ('be -> ('bf -> 'bg) -> ('be -> 'bf) -> 'bg)

(* Additional function to create nested applications. *)
fun nested_quadratic_case () =
  let
    val g0 = chain10 (chain10 (fn x => x))
    val g1 = chain9 (chain11 (fn x => (x, x)))
    val g2 = chain8 (chain12 (fn x => [x]))
    val g3 = chain7 (chain13 (fn x => SOME x))
    val g4 = chain6 (chain14 (fn x => (x, x, x)))
    val g5 = chain5 (chain15 (fn x => fn y => (x, y)))
    val g6 = chain4 (chain16 (fn x => {field = x}))
    val g7 = chain3 (chain17 (fn x => if true then x else x))
    val g8 = chain2 (chain18 (fn x => LEAF x))
    val g9 = chain1 (chain19 (fn x => NODE (LEAF x, x, LEAF x)))
    val g10 = chain0 (chain20 (fn x => LEFT x))
  in
    (g0, g1, g2, g3, g4, g5, g6, g7, g8, g9, g10)
  end;
> val nested_quadratic_case = fn
>   : unit
>     -> ('a -> 'a) * ('b -> 'b * 'b) * ('c -> 'c list) * ('d -> 'd option) *
>        ('e -> 'e * 'e * 'e) * ('f -> 'g -> 'f * 'g) * ('h -> {field:'h}) *
>        ('i -> 'i) * ('j -> 'j tree) * ('k -> 'k tree) * ('l -> ('l,'m) either)

(* Cross-chain dependencies for even more complexity. *)
fun cross_chain () =
  let
    val h0 = chain0 (chain10 (fn x => x))
    val h1 = chain1 (chain9 (fn x => (x, x)))
    val h2 = chain2 (chain8 (fn x => [x]))
    val h3 = chain3 (chain7 (fn x => SOME x))
    val h4 = chain4 (chain6 (fn x => (x, x, x)))
    val h5 = chain5 (chain5 (fn x => fn y => (x, y)))
    val h6 = chain6 (chain4 (fn x => {field = x}))
    val h7 = chain7 (chain3 (fn x => if true then x else x))
    val h8 = chain8 (chain2 (fn x => apply (fn y => (x, y)) x))
    val h9 = chain9 (chain1 (fn x => apply (fn y => apply (fn z => (x, y, z)) y) x))
    val h10 = chain10 (chain0 (fn x => LEAF x))
  in
    (h0, h1, h2, h3, h4, h5, h6, h7, h8, h9, h10)
  end;
> val cross_chain = fn
>   : unit
>     -> ('a -> 'a) * ('b -> 'b * 'b) * ('c -> 'c list) * ('d -> 'd option) *
>        ('e -> 'e * 'e * 'e) * ('f -> 'g -> 'f * 'g) * ('h -> {field:'h}) *
>        ('i -> 'i) * ('j -> 'j * 'j) * ('k -> 'k * 'k * 'k) * ('l -> 'l tree)

(* Test all the cases *)
val all_cases = (quadratic_case(), nested_quadratic_case(), cross_chain());
> val all_cases =
>   ((fn,fn,fn,fn,fn,fn,fn,fn,fn,fn,fn,fn,fn,fn,fn,fn,fn,fn,fn,fn,fn),
>    (fn,fn,fn,fn,fn,fn,fn,fn,fn,fn,fn),(fn,fn,fn,fn,fn,fn,fn,fn,fn,fn,fn))
>   :
>     ('a -> 'a) * ('b -> 'b * 'b) * ('c -> 'c list) * ('d -> 'd option) *
>     ('e -> 'e * 'e * 'e) * ('f -> 'g -> 'f * 'g) * ('h -> {field:'h}) *
>     ('i -> 'i) * ('j -> 'j * 'j) * ('k -> 'k * 'k * 'k) * ('l -> 'l tree) *
>     ('m -> 'm tree) * ('n -> ('n,'o) either) * ('p -> ('q,'p) either) *
>     ('r -> 's -> 'r * ('s * 'r)) * ('t -> 'u -> 'u * 't * 't) *
>     ('v -> 'w -> 'x -> 'v * 'w * 'x) * ('y -> 'z -> 'y) * ('ba -> 'bb -> 'bb)
>      * ('bc -> ('bc -> 'bd) -> 'bd) *
>     ('be -> ('bf -> 'bg) -> ('be -> 'bf) -> 'bg) *
>     (
>     ('bh -> 'bh) * ('bi -> 'bi * 'bi) * ('bj -> 'bj list) * ('bk -> 'bk option)
>      * ('bl -> 'bl * 'bl * 'bl) * ('bm -> 'bn -> 'bm * 'bn) *
>     ('bo -> {field:'bo}) * ('bp -> 'bp) * ('bq -> 'bq tree) * ('br -> 'br tree)
>      * ('bs -> ('bs,'bt) either)) *
>     (
>     ('bu -> 'bu) * ('bv -> 'bv * 'bv) * ('bw -> 'bw list) * ('bx -> 'bx option)
>      * ('by -> 'by * 'by * 'by) * ('bz -> 'ca -> 'bz * 'ca) *
>     ('cb -> {field:'cb}) * ('cc -> 'cc) * ('cd -> 'cd * 'cd) *
>     ('ce -> 'ce * 'ce * 'ce) * ('cf -> 'cf tree))

(* Function that creates a quadratic unification case. *)
fun quadratic_case2 () =
  let
    val f0 = chain0 (fn x => x)
    val f1 = chain1 (fn x => (x, x))
    val f2 = chain2 (fn x => [x])
    val f3 = chain3 (fn x => SOME x)
    val f4 = chain4 (fn x => (x, x, x))
    val f5 = chain5 (fn x => fn y => (x, y))
    val f6 = chain6 (fn x => {field = x})
    val f7 = chain7 (fn x => if true then x else x)
    val f8 = chain8 (fn x => apply (fn y => (x, y)) x)
    val f9 = chain9 (fn x => apply (fn y => apply (fn z => (x, y, z)) y) x)
    val f10 = chain10 (fn x => LEAF x)
    val f11 = chain11 (fn x => NODE (LEAF x, x, LEAF x))
    val f12 = chain12 (fn x => LEFT x)
    val f13 = chain13 (fn x => RIGHT x)
    val f14 = chain14 (fn x => compose (fn y => (x, y)) (fn z => (z, x)))
    val f15 = chain15 (fn x => flip (fn a => fn b => (a, b, x)) x)
    val f16 = chain16 (fn x => fn y => fn z => (x, y, z))
    val f17 = chain17 (fn x => fn y => fst (x, y))
    val f18 = chain18 (fn x => fn y => snd (x, y))
    val f19 = chain19 (fn x => fn f => f x)
    val f20 = chain20 (fn x => fn f => fn g => compose f g x)
    val f21 = chain20 (fn x => fn f => fn g => compose f g x)
    val f22 = chain20 (fn x => fn f => fn g => compose f g x)
    val f23 = chain20 (fn x => fn f => fn g => compose f g x)
    val f24 = chain20 (fn x => fn f => fn g => compose f g x)
    val f25 = chain20 (fn x => fn f => fn g => compose f g x)
    val f26 = chain20 (fn x => fn f => fn g => compose f g x)
    val f27 = chain20 (fn x => fn f => fn g => compose f g x)
    val f28 = chain20 (fn x => fn f => fn g => compose f g x)
    val f29 = chain20 (fn x => fn f => fn g => compose f g x)
    val f30 = chain20 (fn x => fn f => fn g => compose f g x)
    val f31 = chain20 (fn x => fn f => fn g => compose f g x)
    val f32 = chain20 (fn x => fn f => fn g => compose f g x)
    val f33 = chain20 (fn x => fn f => fn g => compose f g x)
    val f34 = chain20 (fn x => fn f => fn g => compose f g x)
    val f35 = chain20 (fn x => fn f => fn g => compose f g x)
    val f36 = chain20 (fn x => fn f => fn g => compose f g x)
    val f37 = chain20 (fn x => fn f => fn g => compose f g x)
    val f38 = chain20 (fn x => fn f => fn g => compose f g x)
    val f39 = chain20 (fn x => fn f => fn g => compose f g x)
  in
    (f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13,
     f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25,
     f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37,
     f38, f39)
  end;
> val quadratic_case2 = fn
>   : unit
>     -> ('a -> 'a) * ('b -> 'b * 'b) * ('c -> 'c list) * ('d -> 'd option) *
>        ('e -> 'e * 'e * 'e) * ('f -> 'g -> 'f * 'g) * ('h -> {field:'h}) *
>        ('i -> 'i) * ('j -> 'j * 'j) * ('k -> 'k * 'k * 'k) * ('l -> 'l tree) *
>        ('m -> 'm tree) * ('n -> ('n,'o) either) * ('p -> ('q,'p) either) *
>        ('r -> 's -> 'r * ('s * 'r)) * ('t -> 'u -> 'u * 't * 't) *
>        ('v -> 'w -> 'x -> 'v * 'w * 'x) * ('y -> 'z -> 'y) *
>        ('ba -> 'bb -> 'bb) * ('bc -> ('bc -> 'bd) -> 'bd) *
>        ('be -> ('bf -> 'bg) -> ('be -> 'bf) -> 'bg) *
>        ('bh -> ('bi -> 'bj) -> ('bh -> 'bi) -> 'bj) *
>        ('bk -> ('bl -> 'bm) -> ('bk -> 'bl) -> 'bm) *
>        ('bn -> ('bo -> 'bp) -> ('bn -> 'bo) -> 'bp) *
>        ('bq -> ('br -> 'bs) -> ('bq -> 'br) -> 'bs) *
>        ('bt -> ('bu -> 'bv) -> ('bt -> 'bu) -> 'bv) *
>        ('bw -> ('bx -> 'by) -> ('bw -> 'bx) -> 'by) *
>        ('bz -> ('ca -> 'cb) -> ('bz -> 'ca) -> 'cb) *
>        ('cc -> ('cd -> 'ce) -> ('cc -> 'cd) -> 'ce) *
>        ('cf -> ('cg -> 'ch) -> ('cf -> 'cg) -> 'ch) *
>        ('ci -> ('cj -> 'ck) -> ('ci -> 'cj) -> 'ck) *
>        ('cl -> ('cm -> 'cn) -> ('cl -> 'cm) -> 'cn) *
>        ('co -> ('cp -> 'cq) -> ('co -> 'cp) -> 'cq) *
>        ('cr -> ('cs -> 'ct) -> ('cr -> 'cs) -> 'ct) *
>        ('cu -> ('cv -> 'cw) -> ('cu -> 'cv) -> 'cw) *
>        ('cx -> ('cy -> 'cz) -> ('cx -> 'cy) -> 'cz) *
>        ('da -> ('db -> 'dc) -> ('da -> 'db) -> 'dc) *
>        ('dd -> ('de -> 'df) -> ('dd -> 'de) -> 'df) *
>        ('dg -> ('dh -> 'di) -> ('dg -> 'dh) -> 'di) *
>        ('dj -> ('dk -> 'dl) -> ('dj -> 'dk) -> 'dl)

(* Function that creates a quadratic unification case. *)
fun quadratic_case3 () =
  let
    val f0 = chain0 (fn x => x)
    val f1 = chain1 (fn x => (x, x))
    val f2 = chain2 (fn x => [x])
    val f3 = chain3 (fn x => SOME x)
    val f4 = chain4 (fn x => (x, x, x))
    val f5 = chain5 (fn x => fn y => (x, y))
    val f6 = chain6 (fn x => {field = x})
    val f7 = chain7 (fn x => if true then x else x)
    val f8 = chain8 (fn x => apply (fn y => (x, y)) x)
    val f9 = chain9 (fn x => apply (fn y => apply (fn z => (x, y, z)) y) x)
    val f10 = chain10 (fn x => LEAF x)
    val f11 = chain11 (fn x => NODE (LEAF x, x, LEAF x))
    val f12 = chain12 (fn x => LEFT x)
    val f13 = chain13 (fn x => RIGHT x)
    val f14 = chain14 (fn x => compose (fn y => (x, y)) (fn z => (z, x)))
    val f15 = chain15 (fn x => flip (fn a => fn b => (a, b, x)) x)
    val f16 = chain16 (fn x => fn y => fn z => (x, y, z))
    val f17 = chain17 (fn x => fn y => fst (x, y))
    val f18 = chain18 (fn x => fn y => snd (x, y))
    val f19 = chain19 (fn x => fn f => f x)
    val f20 = chain20 (fn x => fn f => fn g => compose f g x)
    val f21 = chain1 (fn x => (x, x))
    val f22 = chain2 (fn x => [x])
    val f23 = chain3 (fn x => SOME x)
    val f24 = chain4 (fn x => (x, x, x))
    val f25 = chain5 (fn x => fn y => (x, y))
    val f26 = chain6 (fn x => {field = x})
    val f27 = chain7 (fn x => if true then x else x)
    val f28 = chain8 (fn x => apply (fn y => (x, y)) x)
    val f29 = chain9 (fn x => apply (fn y => apply (fn z => (x, y, z)) y) x)
    val f30 = chain10 (fn x => LEAF x)
    val f31 = chain11 (fn x => NODE (LEAF x, x, LEAF x))
    val f32 = chain12 (fn x => LEFT x)
    val f33 = chain13 (fn x => RIGHT x)
    val f34 = chain14 (fn x => compose (fn y => (x, y)) (fn z => (z, x)))
    val f35 = chain15 (fn x => flip (fn a => fn b => (a, b, x)) x)
    val f36 = chain16 (fn x => fn y => fn z => (x, y, z))
    val f37 = chain17 (fn x => fn y => fst (x, y))
    val f38 = chain18 (fn x => fn y => snd (x, y))
    val f39 = chain19 (fn x => fn f => f x)
    val f40 = chain20 (fn x => fn f => fn g => compose f g x)
    val f41 = chain1 (fn x => (x, x))
    val f42 = chain2 (fn x => [x])
    val f43 = chain3 (fn x => SOME x)
    val f44 = chain4 (fn x => (x, x, x))
    val f45 = chain5 (fn x => fn y => (x, y))
    val f46 = chain6 (fn x => {field = x})
    val f47 = chain7 (fn x => if true then x else x)
  in
    (f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13,
     f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25,
     f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37,
     f38, f39, f40, f41, f42, f43, f44, f45, f46, f47)
  end;
> val quadratic_case3 = fn
>   : unit
>     -> ('a -> 'a) * ('b -> 'b * 'b) * ('c -> 'c list) * ('d -> 'd option) *
>        ('e -> 'e * 'e * 'e) * ('f -> 'g -> 'f * 'g) * ('h -> {field:'h}) *
>        ('i -> 'i) * ('j -> 'j * 'j) * ('k -> 'k * 'k * 'k) * ('l -> 'l tree) *
>        ('m -> 'm tree) * ('n -> ('n,'o) either) * ('p -> ('q,'p) either) *
>        ('r -> 's -> 'r * ('s * 'r)) * ('t -> 'u -> 'u * 't * 't) *
>        ('v -> 'w -> 'x -> 'v * 'w * 'x) * ('y -> 'z -> 'y) *
>        ('ba -> 'bb -> 'bb) * ('bc -> ('bc -> 'bd) -> 'bd) *
>        ('be -> ('bf -> 'bg) -> ('be -> 'bf) -> 'bg) * ('bh -> 'bh * 'bh) *
>        ('bi -> 'bi list) * ('bj -> 'bj option) * ('bk -> 'bk * 'bk * 'bk) *
>        ('bl -> 'bm -> 'bl * 'bm) * ('bn -> {field:'bn}) * ('bo -> 'bo) *
>        ('bp -> 'bp * 'bp) * ('bq -> 'bq * 'bq * 'bq) * ('br -> 'br tree) *
>        ('bs -> 'bs tree) * ('bt -> ('bt,'bu) either) *
>        ('bv -> ('bw,'bv) either) * ('bx -> 'by -> 'bx * ('by * 'bx)) *
>        ('bz -> 'ca -> 'ca * 'bz * 'bz) * ('cb -> 'cc -> 'cd -> 'cb * 'cc * 'cd)
>         * ('ce -> 'cf -> 'ce) * ('cg -> 'ch -> 'ch) *
>        ('ci -> ('ci -> 'cj) -> 'cj) *
>        ('ck -> ('cl -> 'cm) -> ('ck -> 'cl) -> 'cm) * ('cn -> 'cn * 'cn) *
>        ('co -> 'co list) * ('cp -> 'cp option) * ('cq -> 'cq * 'cq * 'cq) *
>        ('cr -> 'cs -> 'cr * 'cs) * ('ct -> {field:'ct}) * ('cu -> 'cu)

let
  val v01 = 1
  val v02 = 2
  val v03 = 3
  val v04 = v02 * v02
  val v05 = 5
  val v06 = v02 * v03
in
  v01 + v02 + v03 + v04 + v05 + v06
end;
> val it = 21 : int

fun isDivisible(n : int, d : int) : bool =
    n mod d = 0;
> val isDivisible = fn : int * int -> bool

(* Helper function to find the smallest divisor starting from a given value *)
fun findSmallestDivisor(n : int, start : int) : int =
    if start * start > n then n
    else if isDivisible(n, start) then start
    else findSmallestDivisor(n, start + 1);
> val findSmallestDivisor = fn : int * int -> int

(* Function to get the smallest prime factor *)
fun smallestFactor(n : int) : int =
    if n <= 1 then n
    else findSmallestDivisor(n, 2);
> val smallestFactor = fn : int -> int

(* Main function to factorize a number *)
fun factorize(n : int) : int list =
    if n <= 1 then [n]
    else
        let
            val factor = smallestFactor(n)
        in
            if factor = n then [n]
            else factor :: factorize(n div factor)
        end;
> val factorize = fn : int -> int list

(* Example usage *)
factorize 60;
> val it = [2,2,3,5] : int list
factorize 84;
> val it = [2,2,3,7] : int list
factorize 101;
> val it = [101] : int list

Sys.set ("stringDepth", 1000000);
> val it = () : unit

fun program n =
  let
    fun concat2 (start, sep, `end`, list) =
      start ^
        (case list of
            [] => ""
          | [s] => s
          | first :: rest => first ^ (String.concat (List.map (fn s => sep ^ s) rest))) ^
        `end`
    fun f i =
      " val i" ^ (Int.toString i) ^ " = " ^
        let
          val factors = (factorize i)
        in
          if (length factors) = 1 then
            Int.toString (hd factors)
          else
            (concat2 ("", " * ", "", (List.map (fn factor => "i" ^ (Int.toString factor)) factors)))
        end ^ ";"
  in
    "let " ^
      String.concat (List.tabulate (n, f)) ^
      " in " ^
      concat2 ("(", ", ", ")", List.tabulate (n, fn i => "i" ^ (Int.toString i))) ^
      " end"
  end;
> val program = fn : int -> string

program 1000;
> val it =
>   "let  val i0 = 0; val i1 = 1; val i2 = 2; val i3 = 3; val i4 = i2 * i2; val i5 = 5; val i6 = i2 * i3; val i7 = 7; val i8 = i2 * i2 * i2; val i9 = i3 * i3; val i10 = i2 * i5; val i11 = 11; val i12 = i2 * i2 * i3; val i13 = 13; val i14 = i2 * i7; val i15 = i3 * i5; val i16 = i2 * i2 * i2 * i2; val i17 = 17; val i18 = i2 * i3 * i3; val i19 = 19; val i20 = i2 * i2 * i5; val i21 = i3 * i7; val i22 = i2 * i11; val i23 = 23; val i24 = i2 * i2 * i2 * i3; val i25 = i5 * i5; val i26 = i2 * i13; val i27 = i3 * i3 * i3; val i28 = i2 * i2 * i7; val i29 = 29; val i30 = i2 * i3 * i5; val i31 = 31; val i32 = i2 * i2 * i2 * i2 * i2; val i33 = i3 * i11; val i34 = i2 * i17; val i35 = i5 * i7; val i36 = i2 * i2 * i3 * i3; val i37 = 37; val i38 = i2 * i19; val i39 = i3 * i13; val i40 = i2 * i2 * i2 * i5; val i41 = 41; val i42 = i2 * i3 * i7; val i43 = 43; val i44 = i2 * i2 * i11; val i45 = i3 * i3 * i5; val i46 = i2 * i23; val i47 = 47; val i48 = i2 * i2 * i2 * i2 * i3; val i49 = i7 * i7; val i50 = i2 * i5 * i5; val i51 = i3 * i17; val i52 = i2 * i2 * i13; val i53 = 53; val i54 = i2 * i3 * i3 * i3; val i55 = i5 * i11; val i56 = i2 * i2 * i2 * i7; val i57 = i3 * i19; val i58 = i2 * i29; val i59 = 59; val i60 = i2 * i2 * i3 * i5; val i61 = 61; val i62 = i2 * i31; val i63 = i3 * i3 * i7; val i64 = i2 * i2 * i2 * i2 * i2 * i2; val i65 = i5 * i13; val i66 = i2 * i3 * i11; val i67 = 67; val i68 = i2 * i2 * i17; val i69 = i3 * i23; val i70 = i2 * i5 * i7; val i71 = 71; val i72 = i2 * i2 * i2 * i3 * i3; val i73 = 73; val i74 = i2 * i37; val i75 = i3 * i5 * i5; val i76 = i2 * i2 * i19; val i77 = i7 * i11; val i78 = i2 * i3 * i13; val i79 = 79; val i80 = i2 * i2 * i2 * i2 * i5; val i81 = i3 * i3 * i3 * i3; val i82 = i2 * i41; val i83 = 83; val i84 = i2 * i2 * i3 * i7; val i85 = i5 * i17; val i86 = i2 * i43; val i87 = i3 * i29; val i88 = i2 * i2 * i2 * i11; val i89 = 89; val i90 = i2 * i3 * i3 * i5; val i91 = i7 * i13; val i92 = i2 * i2 * i23; val i93 = i3 * i31; val i94 = i2 * i47; val i95 = i5 * i19; val i96 = i2 * i2 * i2 * i2 * i2 * i3; val i97 = 97; val i98 = i2 * i7 * i7; val i99 = i3 * i3 * i11; val i100 = i2 * i2 * i5 * i5; val i101 = 101; val i102 = i2 * i3 * i17; val i103 = 103; val i104 = i2 * i2 * i2 * i13; val i105 = i3 * i5 * i7; val i106 = i2 * i53; val i107 = 107; val i108 = i2 * i2 * i3 * i3 * i3; val i109 = 109; val i110 = i2 * i5 * i11; val i111 = i3 * i37; val i112 = i2 * i2 * i2 * i2 * i7; val i113 = 113; val i114 = i2 * i3 * i19; val i115 = i5 * i23; val i116 = i2 * i2 * i29; val i117 = i3 * i3 * i13; val i118 = i2 * i59; val i119 = i7 * i17; val i120 = i2 * i2 * i2 * i3 * i5; val i121 = i11 * i11; val i122 = i2 * i61; val i123 = i3 * i41; val i124 = i2 * i2 * i31; val i125 = i5 * i5 * i5; val i126 = i2 * i3 * i3 * i7; val i127 = 127; val i128 = i2 * i2 * i2 * i2 * i2 * i2 * i2; val i129 = i3 * i43; val i130 = i2 * i5 * i13; val i131 = 131; val i132 = i2 * i2 * i3 * i11; val i133 = i7 * i19; val i134 = i2 * i67; val i135 = i3 * i3 * i3 * i5; val i136 = i2 * i2 * i2 * i17; val i137 = 137; val i138 = i2 * i3 * i23; val i139 = 139; val i140 = i2 * i2 * i5 * i7; val i141 = i3 * i47; val i142 = i2 * i71; val i143 = i11 * i13; val i144 = i2 * i2 * i2 * i2 * i3 * i3; val i145 = i5 * i29; val i146 = i2 * i73; val i147 = i3 * i7 * i7; val i148 = i2 * i2 * i37; val i149 = 149; val i150 = i2 * i3 * i5 * i5; val i151 = 151; val i152 = i2 * i2 * i2 * i19; val i153 = i3 * i3 * i17; val i154 = i2 * i7 * i11; val i155 = i5 * i31; val i156 = i2 * i2 * i3 * i13; val i157 = 157; val i158 = i2 * i79; val i159 = i3 * i53; val i160 = i2 * i2 * i2 * i2 * i2 * i5; val i161 = i7 * i23; val i162 = i2 * i3 * i3 * i3 * i3; val i163 = 163; val i164 = i2 * i2 * i41; val i165 = i3 * i5 * i11; val i166 = i2 * i83; val i167 = 167; val i168 = i2 * i2 * i2 * i3 * i7; val i169 = i13 * i13; val i170 = i2 * i5 * i17; val i171 = i3 * i3 * i19; val i172 = i2 * i2 * i43; val i173 = 173; val i174 = i2 * i3 * i29; val i175 = i5 * i5 * i7; val i176 = i2 * i2 * i2 * i2 * i11; val i177 = i3 * i59; val i178 = i2 * i89; val i179 = 179; val i180 = i2 * i2 * i3 * i3 * i5; val i181 = 181; val i182 = i2 * i7 * i13; val i183 = i3 * i61; val i184 = i2 * i2 * i2 * i23; val i185 = i5 * i37; val i186 = i2 * i3 * i31; val i187 = i11 * i17; val i188 = i2 * i2 * i47; val i189 = i3 * i3 * i3 * i7; val i190 = i2 * i5 * i19; val i191 = 191; val i192 = i2 * i2 * i2 * i2 * i2 * i2 * i3; val i193 = 193; val i194 = i2 * i97; val i195 = i3 * i5 * i13; val i196 = i2 * i2 * i7 * i7; val i197 = 197; val i198 = i2 * i3 * i3 * i11; val i199 = 199; val i200 = i2 * i2 * i2 * i5 * i5; val i201 = i3 * i67; val i202 = i2 * i101; val i203 = i7 * i29; val i204 = i2 * i2 * i3 * i17; val i205 = i5 * i41; val i206 = i2 * i103; val i207 = i3 * i3 * i23; val i208 = i2 * i2 * i2 * i2 * i13; val i209 = i11 * i19; val i210 = i2 * i3 * i5 * i7; val i211 = 211; val i212 = i2 * i2 * i53; val i213 = i3 * i71; val i214 = i2 * i107; val i215 = i5 * i43; val i216 = i2 * i2 * i2 * i3 * i3 * i3; val i217 = i7 * i31; val i218 = i2 * i109; val i219 = i3 * i73; val i220 = i2 * i2 * i5 * i11; val i221 = i13 * i17; val i222 = i2 * i3 * i37; val i223 = 223; val i224 = i2 * i2 * i2 * i2 * i2 * i7; val i225 = i3 * i3 * i5 * i5; val i226 = i2 * i113; val i227 = 227; val i228 = i2 * i2 * i3 * i19; val i229 = 229; val i230 = i2 * i5 * i23; val i231 = i3 * i7 * i11; val i232 = i2 * i2 * i2 * i29; val i233 = 233; val i234 = i2 * i3 * i3 * i13; val i235 = i5 * i47; val i236 = i2 * i2 * i59; val i237 = i3 * i79; val i238 = i2 * i7 * i17; val i239 = 239; val i240 = i2 * i2 * i2 * i2 * i3 * i5; val i241 = 241; val i242 = i2 * i11 * i11; val i243 = i3 * i3 * i3 * i3 * i3; val i244 = i2 * i2 * i61; val i245 = i5 * i7 * i7; val i246 = i2 * i3 * i41; val i247 = i13 * i19; val i248 = i2 * i2 * i2 * i31; val i249 = i3 * i83; val i250 = i2 * i5 * i5 * i5; val i251 = 251; val i252 = i2 * i2 * i3 * i3 * i7; val i253 = i11 * i23; val i254 = i2 * i127; val i255 = i3 * i5 * i17; val i256 = i2 * i2 * i2 * i2 * i2 * i2 * i2 * i2; val i257 = 257; val i258 = i2 * i3 * i43; val i259 = i7 * i37; val i260 = i2 * i2 * i5 * i13; val i261 = i3 * i3 * i29; val i262 = i2 * i131; val i263 = 263; val i264 = i2 * i2 * i2 * i3 * i11; val i265 = i5 * i53; val i266 = i2 * i7 * i19; val i267 = i3 * i89; val i268 = i2 * i2 * i67; val i269 = 269; val i270 = i2 * i3 * i3 * i3 * i5; val i271 = 271; val i272 = i2 * i2 * i2 * i2 * i17; val i273 = i3 * i7 * i13; val i274 = i2 * i137; val i275 = i5 * i5 * i11; val i276 = i2 * i2 * i3 * i23; val i277 = 277; val i278 = i2 * i139; val i279 = i3 * i3 * i31; val i280 = i2 * i2 * i2 * i5 * i7; val i281 = 281; val i282 = i2 * i3 * i47; val i283 = 283; val i284 = i2 * i2 * i71; val i285 = i3 * i5 * i19; val i286 = i2 * i11 * i13; val i287 = i7 * i41; val i288 = i2 * i2 * i2 * i2 * i2 * i3 * i3; val i289 = i17 * i17; val i290 = i2 * i5 * i29; val i291 = i3 * i97; val i292 = i2 * i2 * i73; val i293 = 293; val i294 = i2 * i3 * i7 * i7; val i295 = i5 * i59; val i296 = i2 * i2 * i2 * i37; val i297 = i3 * i3 * i3 * i11; val i298 = i2 * i149; val i299 = i13 * i23; val i300 = i2 * i2 * i3 * i5 * i5; val i301 = i7 * i43; val i302 = i2 * i151; val i303 = i3 * i101; val i304 = i2 * i2 * i2 * i2 * i19; val i305 = i5 * i61; val i306 = i2 * i3 * i3 * i17; val i307 = 307; val i308 = i2 * i2 * i7 * i11; val i309 = i3 * i103; val i310 = i2 * i5 * i31; val i311 = 311; val i312 = i2 * i2 * i2 * i3 * i13; val i313 = 313; val i314 = i2 * i157; val i315 = i3 * i3 * i5 * i7; val i316 = i2 * i2 * i79; val i317 = 317; val i318 = i2 * i3 * i53; val i319 = i11 * i29; val i320 = i2 * i2 * i2 * i2 * i2 * i2 * i5; val i321 = i3 * i107; val i322 = i2 * i7 * i23; val i323 = i17 * i19; val i324 = i2 * i2 * i3 * i3 * i3 * i3; val i325 = i5 * i5 * i13; val i326 = i2 * i163; val i327 = i3 * i109; val i328 = i2 * i2 * i2 * i41; val i329 = i7 * i47; val i330 = i2 * i3 * i5 * i11; val i331 = 331; val i332 = i2 * i2 * i83; val i333 = i3 * i3 * i37; val i334 = i2 * i167; val i335 = i5 * i67; val i336 = i2 * i2 * i2 * i2 * i3 * i7; val i337 = 337; val i338 = i2 * i13 * i13; val i339 = i3 * i113; val i340 = i2 * i2 * i5 * i17; val i341 = i11 * i31; val i342 = i2 * i3 * i3 * i19; val i343 = i7 * i7 * i7; val i344 = i2 * i2 * i2 * i43; val i345 = i3 * i5 * i23; val i346 = i2 * i173; val i347 = 347; val i348 = i2 * i2 * i3 * i29; val i349 = 349; val i350 = i2 * i5 * i5 * i7; val i351 = i3 * i3 * i3 * i13; val i352 = i2 * i2 * i2 * i2 * i2 * i11; val i353 = 353; val i354 = i2 * i3 * i59; val i355 = i5 * i71; val i356 = i2 * i2 * i89; val i357 = i3 * i7 * i17; val i358 = i2 * i179; val i359 = 359; val i360 = i2 * i2 * i2 * i3 * i3 * i5; val i361 = i19 * i19; val i362 = i2 * i181; val i363 = i3 * i11 * i11; val i364 = i2 * i2 * i7 * i13; val i365 = i5 * i73; val i366 = i2 * i3 * i61; val i367 = 367; val i368 = i2 * i2 * i2 * i2 * i23; val i369 = i3 * i3 * i41; val i370 = i2 * i5 * i37; val i371 = i7 * i53; val i372 = i2 * i2 * i3 * i31; val i373 = 373; val i374 = i2 * i11 * i17; val i375 = i3 * i5 * i5 * i5; val i376 = i2 * i2 * i2 * i47; val i377 = i13 * i29; val i378 = i2 * i3 * i3 * i3 * i7; val i379 = 379; val i380 = i2 * i2 * i5 * i19; val i381 = i3 * i127; val i382 = i2 * i191; val i383 = 383; val i384 = i2 * i2 * i2 * i2 * i2 * i2 * i2 * i3; val i385 = i5 * i7 * i11; val i386 = i2 * i193; val i387 = i3 * i3 * i43; val i388 = i2 * i2 * i97; val i389 = 389; val i390 = i2 * i3 * i5 * i13; val i391 = i17 * i23; val i392 = i2 * i2 * i2 * i7 * i7; val i393 = i3 * i131; val i394 = i2 * i197; val i395 = i5 * i79; val i396 = i2 * i2 * i3 * i3 * i11; val i397 = 397; val i398 = i2 * i199; val i399 = i3 * i7 * i19; val i400 = i2 * i2 * i2 * i2 * i5 * i5; val i401 = 401; val i402 = i2 * i3 * i67; val i403 = i13 * i31; val i404 = i2 * i2 * i101; val i405 = i3 * i3 * i3 * i3 * i5; val i406 = i2 * i7 * i29; val i407 = i11 * i37; val i408 = i2 * i2 * i2 * i3 * i17; val i409 = 409; val i410 = i2 * i5 * i41; val i411 = i3 * i137; val i412 = i2 * i2 * i103; val i413 = i7 * i59; val i414 = i2 * i3 * i3 * i23; val i415 = i5 * i83; val i416 = i2 * i2 * i2 * i2 * i2 * i13; val i417 = i3 * i139; val i418 = i2 * i11 * i19; val i419 = 419; val i420 = i2 * i2 * i3 * i5 * i7; val i421 = 421; val i422 = i2 * i211; val i423 = i3 * i3 * i47; val i424 = i2 * i2 * i2 * i53; val i425 = i5 * i5 * i17; val i426 = i2 * i3 * i71; val i427 = i7 * i61; val i428 = i2 * i2 * i107; val i429 = i3 * i11 * i13; val i430 = i2 * i5 * i43; val i431 = 431; val i432 = i2 * i2 * i2 * i2 * i3 * i3 * i3; val i433 = 433; val i434 = i2 * i7 * i31; val i435 = i3 * i5 * i29; val i436 = i2 * i2 * i109; val i437 = i19 * i23; val i438 = i2 * i3 * i73; val i439 = 439; val i440 = i2 * i2 * i2 * i5 * i11; val i441 = i3 * i3 * i7 * i7; val i442 = i2 * i13 * i17; val i443 = 443; val i444 = i2 * i2 * i3 * i37; val i445 = i5 * i89; val i446 = i2 * i223; val i447 = i3 * i149; val i448 = i2 * i2 * i2 * i2 * i2 * i2 * i7; val i449 = 449; val i450 = i2 * i3 * i3 * i5 * i5; val i451 = i11 * i41; val i452 = i2 * i2 * i113; val i453 = i3 * i151; val i454 = i2 * i227; val i455 = i5 * i7 * i13; val i456 = i2 * i2 * i2 * i3 * i19; val i457 = 457; val i458 = i2 * i229; val i459 = i3 * i3 * i3 * i17; val i460 = i2 * i2 * i5 * i23; val i461 = 461; val i462 = i2 * i3 * i7 * i11; val i463 = 463; val i464 = i2 * i2 * i2 * i2 * i29; val i465 = i3 * i5 * i31; val i466 = i2 * i233; val i467 = 467; val i468 = i2 * i2 * i3 * i3 * i13; val i469 = i7 * i67; val i470 = i2 * i5 * i47; val i471 = i3 * i157; val i472 = i2 * i2 * i2 * i59; val i473 = i11 * i43; val i474 = i2 * i3 * i79; val i475 = i5 * i5 * i19; val i476 = i2 * i2 * i7 * i17; val i477 = i3 * i3 * i53; val i478 = i2 * i239; val i479 = 479; val i480 = i2 * i2 * i2 * i2 * i2 * i3 * i5; val i481 = i13 * i37; val i482 = i2 * i241; val i483 = i3 * i7 * i23; val i484 = i2 * i2 * i11 * i11; val i485 = i5 * i97; val i486 = i2 * i3 * i3 * i3 * i3 * i3; val i487 = 487; val i488 = i2 * i2 * i2 * i61; val i489 = i3 * i163; val i490 = i2 * i5 * i7 * i7; val i491 = 491; val i492 = i2 * i2 * i3 * i41; val i493 = i17 * i29; val i494 = i2 * i13 * i19; val i495 = i3 * i3 * i5 * i11; val i496 = i2 * i2 * i2 * i2 * i31; val i497 = i7 * i71; val i498 = i2 * i3 * i83; val i499 = 499; val i500 = i2 * i2 * i5 * i5 * i5; val i501 = i3 * i167; val i502 = i2 * i251; val i503 = 503; val i504 = i2 * i2 * i2 * i3 * i3 * i7; val i505 = i5 * i101; val i506 = i2 * i11 * i23; val i507 = i3 * i13 * i13; val i508 = i2 * i2 * i127; val i509 = 509; val i510 = i2 * i3 * i5 * i17; val i511 = i7 * i73; val i512 = i2 * i2 * i2 * i2 * i2 * i2 * i2 * i2 * i2; val i513 = i3 * i3 * i3 * i19; val i514 = i2 * i257; val i515 = i5 * i103; val i516 = i2 * i2 * i3 * i43; val i517 = i11 * i47; val i518 = i2 * i7 * i37; val i519 = i3 * i173; val i520 = i2 * i2 * i2 * i5 * i13; val i521 = 521; val i522 = i2 * i3 * i3 * i29; val i523 = 523; val i524 = i2 * i2 * i131; val i525 = i3 * i5 * i5 * i7; val i526 = i2 * i263; val i527 = i17 * i31; val i528 = i2 * i2 * i2 * i2 * i3 * i11; val i529 = i23 * i23; val i530 = i2 * i5 * i53; val i531 = i3 * i3 * i59; val i532 = i2 * i2 * i7 * i19; val i533 = i13 * i41; val i534 = i2 * i3 * i89; val i535 = i5 * i107; val i536 = i2 * i2 * i2 * i67; val i537 = i3 * i179; val i538 = i2 * i269; val i539 = i7 * i7 * i11; val i540 = i2 * i2 * i3 * i3 * i3 * i5; val i541 = 541; val i542 = i2 * i271; val i543 = i3 * i181; val i544 = i2 * i2 * i2 * i2 * i2 * i17; val i545 = i5 * i109; val i546 = i2 * i3 * i7 * i13; val i547 = 547; val i548 = i2 * i2 * i137; val i549 = i3 * i3 * i61; val i550 = i2 * i5 * i5 * i11; val i551 = i19 * i29; val i552 = i2 * i2 * i2 * i3 * i23; val i553 = i7 * i79; val i554 = i2 * i277; val i555 = i3 * i5 * i37; val i556 = i2 * i2 * i139; val i557 = 557; val i558 = i2 * i3 * i3 * i31; val i559 = i13 * i43; val i560 = i2 * i2 * i2 * i2 * i5 * i7; val i561 = i3 * i11 * i17; val i562 = i2 * i281; val i563 = 563; val i564 = i2 * i2 * i3 * i47; val i565 = i5 * i113; val i566 = i2 * i283; val i567 = i3 * i3 * i3 * i3 * i7; val i568 = i2 * i2 * i2 * i71; val i569 = 569; val i570 = i2 * i3 * i5 * i19; val i571 = 571; val i572 = i2 * i2 * i11 * i13; val i573 = i3 * i191; val i574 = i2 * i7 * i41; val i575 = i5 * i5 * i23; val i576 = i2 * i2 * i2 * i2 * i2 * i2 * i3 * i3; val i577 = 577; val i578 = i2 * i17 * i17; val i579 = i3 * i193; val i580 = i2 * i2 * i5 * i29; val i581 = i7 * i83; val i582 = i2 * i3 * i97; val i583 = i11 * i53; val i584 = i2 * i2 * i2 * i73; val i585 = i3 * i3 * i5 * i13; val i586 = i2 * i293; val i587 = 587; val i588 = i2 * i2 * i3 * i7 * i7; val i589 = i19 * i31; val i590 = i2 * i5 * i59; val i591 = i3 * i197; val i592 = i2 * i2 * i2 * i2 * i37; val i593 = 593; val i594 = i2 * i3 * i3 * i3 * i11; val i595 = i5 * i7 * i17; val i596 = i2 * i2 * i149; val i597 = i3 * i199; val i598 = i2 * i13 * i23; val i599 = 599; val i600 = i2 * i2 * i2 * i3 * i5 * i5; val i601 = 601; val i602 = i2 * i7 * i43; val i603 = i3 * i3 * i67; val i604 = i2 * i2 * i151; val i605 = i5 * i11 * i11; val i606 = i2 * i3 * i101; val i607 = 607; val i608 = i2 * i2 * i2 * i2 * i2 * i19; val i609 = i3 * i7 * i29; val i610 = i2 * i5 * i61; val i611 = i13 * i47; val i612 = i2 * i2 * i3 * i3 * i17; val i613 = 613; val i614 = i2 * i307; val i615 = i3 * i5 * i41; val i616 = i2 * i2 * i2 * i7 * i11; val i617 = 617; val i618 = i2 * i3 * i103; val i619 = 619; val i620 = i2 * i2 * i5 * i31; val i621 = i3 * i3 * i3 * i23; val i622 = i2 * i311; val i623 = i7 * i89; val i624 = i2 * i2 * i2 * i2 * i3 * i13; val i625 = i5 * i5 * i5 * i5; val i626 = i2 * i313; val i627 = i3 * i11 * i19; val i628 = i2 * i2 * i157; val i629 = i17 * i37; val i630 = i2 * i3 * i3 * i5 * i7; val i631 = 631; val i632 = i2 * i2 * i2 * i79; val i633 = i3 * i211; val i634 = i2 * i317; val i635 = i5 * i127; val i636 = i2 * i2 * i3 * i53; val i637 = i7 * i7 * i13; val i638 = i2 * i11 * i29; val i639 = i3 * i3 * i71; val i640 = i2 * i2 * i2 * i2 * i2 * i2 * i2 * i5; val i641 = 641; val i642 = i2 * i3 * i107; val i643 = 643; val i644 = i2 * i2 * i7 * i23; val i645 = i3 * i5 * i43; val i646 = i2 * i17 * i19; val i647 = 647; val i648 = i2 * i2 * i2 * i3 * i3 * i3 * i3; val i649 = i11 * i59; val i650 = i2 * i5 * i5 * i13; val i651 = i3 * i7 * i31; val i652 = i2 * i2 * i163; val i653 = 653; val i654 = i2 * i3 * i109; val i655 = i5 * i131; val i656 = i2 * i2 * i2 * i2 * i41; val i657 = i3 * i3 * i73; val i658 = i2 * i7 * i47; val i659 = 659; val i660 = i2 * i2 * i3 * i5 * i11; val i661 = 661; val i662 = i2 * i331; val i663 = i3 * i13 * i17; val i664 = i2 * i2 * i2 * i83; val i665 = i5 * i7 * i19; val i666 = i2 * i3 * i3 * i37; val i667 = i23 * i29; val i668 = i2 * i2 * i167; val i669 = i3 * i223; val i670 = i2 * i5 * i67; val i671 = i11 * i61; val i672 = i2 * i2 * i2 * i2 * i2 * i3 * i7; val i673 = 673; val i674 = i2 * i337; val i675 = i3 * i3 * i3 * i5 * i5; val i676 = i2 * i2 * i13 * i13; val i677 = 677; val i678 = i2 * i3 * i113; val i679 = i7 * i97; val i680 = i2 * i2 * i2 * i5 * i17; val i681 = i3 * i227; val i682 = i2 * i11 * i31; val i683 = 683; val i684 = i2 * i2 * i3 * i3 * i19; val i685 = i5 * i137; val i686 = i2 * i7 * i7 * i7; val i687 = i3 * i229; val i688 = i2 * i2 * i2 * i2 * i43; val i689 = i13 * i53; val i690 = i2 * i3 * i5 * i23; val i691 = 691; val i692 = i2 * i2 * i173; val i693 = i3 * i3 * i7 * i11; val i694 = i2 * i347; val i695 = i5 * i139; val i696 = i2 * i2 * i2 * i3 * i29; val i697 = i17 * i41; val i698 = i2 * i349; val i699 = i3 * i233; val i700 = i2 * i2 * i5 * i5 * i7; val i701 = 701; val i702 = i2 * i3 * i3 * i3 * i13; val i703 = i19 * i37; val i704 = i2 * i2 * i2 * i2 * i2 * i2 * i11; val i705 = i3 * i5 * i47; val i706 = i2 * i353; val i707 = i7 * i101; val i708 = i2 * i2 * i3 * i59; val i709 = 709; val i710 = i2 * i5 * i71; val i711 = i3 * i3 * i79; val i712 = i2 * i2 * i2 * i89; val i713 = i23 * i31; val i714 = i2 * i3 * i7 * i17; val i715 = i5 * i11 * i13; val i716 = i2 * i2 * i179; val i717 = i3 * i239; val i718 = i2 * i359; val i719 = 719; val i720 = i2 * i2 * i2 * i2 * i3 * i3 * i5; val i721 = i7 * i103; val i722 = i2 * i19 * i19; val i723 = i3 * i241; val i724 = i2 * i2 * i181; val i725 = i5 * i5 * i29; val i726 = i2 * i3 * i11 * i11; val i727 = 727; val i728 = i2 * i2 * i2 * i7 * i13; val i729 = i3 * i3 * i3 * i3 * i3 * i3; val i730 = i2 * i5 * i73; val i731 = i17 * i43; val i732 = i2 * i2 * i3 * i61; val i733 = 733; val i734 = i2 * i367; val i735 = i3 * i5 * i7 * i7; val i736 = i2 * i2 * i2 * i2 * i2 * i23; val i737 = i11 * i67; val i738 = i2 * i3 * i3 * i41; val i739 = 739; val i740 = i2 * i2 * i5 * i37; val i741 = i3 * i13 * i19; val i742 = i2 * i7 * i53; val i743 = 743; val i744 = i2 * i2 * i2 * i3 * i31; val i745 = i5 * i149; val i746 = i2 * i373; val i747 = i3 * i3 * i83; val i748 = i2 * i2 * i11 * i17; val i749 = i7 * i107; val i750 = i2 * i3 * i5 * i5 * i5; val i751 = 751; val i752 = i2 * i2 * i2 * i2 * i47; val i753 = i3 * i251; val i754 = i2 * i13 * i29; val i755 = i5 * i151; val i756 = i2 * i2 * i3 * i3 * i3 * i7; val i757 = 757; val i758 = i2 * i379; val i759 = i3 * i11 * i23; val i760 = i2 * i2 * i2 * i5 * i19; val i761 = 761; val i762 = i2 * i3 * i127; val i763 = i7 * i109; val i764 = i2 * i2 * i191; val i765 = i3 * i3 * i5 * i17; val i766 = i2 * i383; val i767 = i13 * i59; val i768 = i2 * i2 * i2 * i2 * i2 * i2 * i2 * i2 * i3; val i769 = 769; val i770 = i2 * i5 * i7 * i11; val i771 = i3 * i257; val i772 = i2 * i2 * i193; val i773 = 773; val i774 = i2 * i3 * i3 * i43; val i775 = i5 * i5 * i31; val i776 = i2 * i2 * i2 * i97; val i777 = i3 * i7 * i37; val i778 = i2 * i389; val i779 = i19 * i41; val i780 = i2 * i2 * i3 * i5 * i13; val i781 = i11 * i71; val i782 = i2 * i17 * i23; val i783 = i3 * i3 * i3 * i29; val i784 = i2 * i2 * i2 * i2 * i7 * i7; val i785 = i5 * i157; val i786 = i2 * i3 * i131; val i787 = 787; val i788 = i2 * i2 * i197; val i789 = i3 * i263; val i790 = i2 * i5 * i79; val i791 = i7 * i113; val i792 = i2 * i2 * i2 * i3 * i3 * i11; val i793 = i13 * i61; val i794 = i2 * i397; val i795 = i3 * i5 * i53; val i796 = i2 * i2 * i199; val i797 = 797; val i798 = i2 * i3 * i7 * i19; val i799 = i17 * i47; val i800 = i2 * i2 * i2 * i2 * i2 * i5 * i5; val i801 = i3 * i3 * i89; val i802 = i2 * i401; val i803 = i11 * i73; val i804 = i2 * i2 * i3 * i67; val i805 = i5 * i7 * i23; val i806 = i2 * i13 * i31; val i807 = i3 * i269; val i808 = i2 * i2 * i2 * i101; val i809 = 809; val i810 = i2 * i3 * i3 * i3 * i3 * i5; val i811 = 811; val i812 = i2 * i2 * i7 * i29; val i813 = i3 * i271; val i814 = i2 * i11 * i37; val i815 = i5 * i163; val i816 = i2 * i2 * i2 * i2 * i3 * i17; val i817 = i19 * i43; val i818 = i2 * i409; val i819 = i3 * i3 * i7 * i13; val i820 = i2 * i2 * i5 * i41; val i821 = 821; val i822 = i2 * i3 * i137; val i823 = 823; val i824 = i2 * i2 * i2 * i103; val i825 = i3 * i5 * i5 * i11; val i826 = i2 * i7 * i59; val i827 = 827; val i828 = i2 * i2 * i3 * i3 * i23; val i829 = 829; val i830 = i2 * i5 * i83; val i831 = i3 * i277; val i832 = i2 * i2 * i2 * i2 * i2 * i2 * i13; val i833 = i7 * i7 * i17; val i834 = i2 * i3 * i139; val i835 = i5 * i167; val i836 = i2 * i2 * i11 * i19; val i837 = i3 * i3 * i3 * i31; val i838 = i2 * i419; val i839 = 839; val i840 = i2 * i2 * i2 * i3 * i5 * i7; val i841 = i29 * i29; val i842 = i2 * i421; val i843 = i3 * i281; val i844 = i2 * i2 * i211; val i845 = i5 * i13 * i13; val i846 = i2 * i3 * i3 * i47; val i847 = i7 * i11 * i11; val i848 = i2 * i2 * i2 * i2 * i53; val i849 = i3 * i283; val i850 = i2 * i5 * i5 * i17; val i851 = i23 * i37; val i852 = i2 * i2 * i3 * i71; val i853 = 853; val i854 = i2 * i7 * i61; val i855 = i3 * i3 * i5 * i19; val i856 = i2 * i2 * i2 * i107; val i857 = 857; val i858 = i2 * i3 * i11 * i13; val i859 = 859; val i860 = i2 * i2 * i5 * i43; val i861 = i3 * i7 * i41; val i862 = i2 * i431; val i863 = 863; val i864 = i2 * i2 * i2 * i2 * i2 * i3 * i3 * i3; val i865 = i5 * i173; val i866 = i2 * i433; val i867 = i3 * i17 * i17; val i868 = i2 * i2 * i7 * i31; val i869 = i11 * i79; val i870 = i2 * i3 * i5 * i29; val i871 = i13 * i67; val i872 = i2 * i2 * i2 * i109; val i873 = i3 * i3 * i97; val i874 = i2 * i19 * i23; val i875 = i5 * i5 * i5 * i7; val i876 = i2 * i2 * i3 * i73; val i877 = 877; val i878 = i2 * i439; val i879 = i3 * i293; val i880 = i2 * i2 * i2 * i2 * i5 * i11; val i881 = 881; val i882 = i2 * i3 * i3 * i7 * i7; val i883 = 883; val i884 = i2 * i2 * i13 * i17; val i885 = i3 * i5 * i59; val i886 = i2 * i443; val i887 = 887; val i888 = i2 * i2 * i2 * i3 * i37; val i889 = i7 * i127; val i890 = i2 * i5 * i89; val i891 = i3 * i3 * i3 * i3 * i11; val i892 = i2 * i2 * i223; val i893 = i19 * i47; val i894 = i2 * i3 * i149; val i895 = i5 * i179; val i896 = i2 * i2 * i2 * i2 * i2 * i2 * i2 * i7; val i897 = i3 * i13 * i23; val i898 = i2 * i449; val i899 = i29 * i31; val i900 = i2 * i2 * i3 * i3 * i5 * i5; val i901 = i17 * i53; val i902 = i2 * i11 * i41; val i903 = i3 * i7 * i43; val i904 = i2 * i2 * i2 * i113; val i905 = i5 * i181; val i906 = i2 * i3 * i151; val i907 = 907; val i908 = i2 * i2 * i227; val i909 = i3 * i3 * i101; val i910 = i2 * i5 * i7 * i13; val i911 = 911; val i912 = i2 * i2 * i2 * i2 * i3 * i19; val i913 = i11 * i83; val i914 = i2 * i457; val i915 = i3 * i5 * i61; val i916 = i2 * i2 * i229; val i917 = i7 * i131; val i918 = i2 * i3 * i3 * i3 * i17; val i919 = 919; val i920 = i2 * i2 * i2 * i5 * i23; val i921 = i3 * i307; val i922 = i2 * i461; val i923 = i13 * i71; val i924 = i2 * i2 * i3 * i7 * i11; val i925 = i5 * i5 * i37; val i926 = i2 * i463; val i927 = i3 * i3 * i103; val i928 = i2 * i2 * i2 * i2 * i2 * i29; val i929 = 929; val i930 = i2 * i3 * i5 * i31; val i931 = i7 * i7 * i19; val i932 = i2 * i2 * i233; val i933 = i3 * i311; val i934 = i2 * i467; val i935 = i5 * i11 * i17; val i936 = i2 * i2 * i2 * i3 * i3 * i13; val i937 = 937; val i938 = i2 * i7 * i67; val i939 = i3 * i313; val i940 = i2 * i2 * i5 * i47; val i941 = 941; val i942 = i2 * i3 * i157; val i943 = i23 * i41; val i944 = i2 * i2 * i2 * i2 * i59; val i945 = i3 * i3 * i3 * i5 * i7; val i946 = i2 * i11 * i43; val i947 = 947; val i948 = i2 * i2 * i3 * i79; val i949 = i13 * i73; val i950 = i2 * i5 * i5 * i19; val i951 = i3 * i317; val i952 = i2 * i2 * i2 * i7 * i17; val i953 = 953; val i954 = i2 * i3 * i3 * i53; val i955 = i5 * i191; val i956 = i2 * i2 * i239; val i957 = i3 * i11 * i29; val i958 = i2 * i479; val i959 = i7 * i137; val i960 = i2 * i2 * i2 * i2 * i2 * i2 * i3 * i5; val i961 = i31 * i31; val i962 = i2 * i13 * i37; val i963 = i3 * i3 * i107; val i964 = i2 * i2 * i241; val i965 = i5 * i193; val i966 = i2 * i3 * i7 * i23; val i967 = 967; val i968 = i2 * i2 * i2 * i11 * i11; val i969 = i3 * i17 * i19; val i970 = i2 * i5 * i97; val i971 = 971; val i972 = i2 * i2 * i3 * i3 * i3 * i3 * i3; val i973 = i7 * i139; val i974 = i2 * i487; val i975 = i3 * i5 * i5 * i13; val i976 = i2 * i2 * i2 * i2 * i61; val i977 = 977; val i978 = i2 * i3 * i163; val i979 = i11 * i89; val i980 = i2 * i2 * i5 * i7 * i7; val i981 = i3 * i3 * i109; val i982 = i2 * i491; val i983 = 983; val i984 = i2 * i2 * i2 * i3 * i41; val i985 = i5 * i197; val i986 = i2 * i17 * i29; val i987 = i3 * i7 * i47; val i988 = i2 * i2 * i13 * i19; val i989 = i23 * i43; val i990 = i2 * i3 * i3 * i5 * i11; val i991 = 991; val i992 = i2 * i2 * i2 * i2 * i2 * i31; val i993 = i3 * i331; val i994 = i2 * i7 * i71; val i995 = i5 * i199; val i996 = i2 * i2 * i3 * i83; val i997 = 997; val i998 = i2 * i499; val i999 = i3 * i3 * i3 * i37; in (i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, i55, i56, i57, i58, i59, i60, i61, i62, i63, i64, i65, i66, i67, i68, i69, i70, i71, i72, i73, i74, i75, i76, i77, i78, i79, i80, i81, i82, i83, i84, i85, i86, i87, i88, i89, i90, i91, i92, i93, i94, i95, i96, i97, i98, i99, i100, i101, i102, i103, i104, i105, i106, i107, i108, i109, i110, i111, i112, i113, i114, i115, i116, i117, i118, i119, i120, i121, i122, i123, i124, i125, i126, i127, i128, i129, i130, i131, i132, i133, i134, i135, i136, i137, i138, i139, i140, i141, i142, i143, i144, i145, i146, i147, i148, i149, i150, i151, i152, i153, i154, i155, i156, i157, i158, i159, i160, i161, i162, i163, i164, i165, i166, i167, i168, i169, i170, i171, i172, i173, i174, i175, i176, i177, i178, i179, i180, i181, i182, i183, i184, i185, i186, i187, i188, i189, i190, i191, i192, i193, i194, i195, i196, i197, i198, i199, i200, i201, i202, i203, i204, i205, i206, i207, i208, i209, i210, i211, i212, i213, i214, i215, i216, i217, i218, i219, i220, i221, i222, i223, i224, i225, i226, i227, i228, i229, i230, i231, i232, i233, i234, i235, i236, i237, i238, i239, i240, i241, i242, i243, i244, i245, i246, i247, i248, i249, i250, i251, i252, i253, i254, i255, i256, i257, i258, i259, i260, i261, i262, i263, i264, i265, i266, i267, i268, i269, i270, i271, i272, i273, i274, i275, i276, i277, i278, i279, i280, i281, i282, i283, i284, i285, i286, i287, i288, i289, i290, i291, i292, i293, i294, i295, i296, i297, i298, i299, i300, i301, i302, i303, i304, i305, i306, i307, i308, i309, i310, i311, i312, i313, i314, i315, i316, i317, i318, i319, i320, i321, i322, i323, i324, i325, i326, i327, i328, i329, i330, i331, i332, i333, i334, i335, i336, i337, i338, i339, i340, i341, i342, i343, i344, i345, i346, i347, i348, i349, i350, i351, i352, i353, i354, i355, i356, i357, i358, i359, i360, i361, i362, i363, i364, i365, i366, i367, i368, i369, i370, i371, i372, i373, i374, i375, i376, i377, i378, i379, i380, i381, i382, i383, i384, i385, i386, i387, i388, i389, i390, i391, i392, i393, i394, i395, i396, i397, i398, i399, i400, i401, i402, i403, i404, i405, i406, i407, i408, i409, i410, i411, i412, i413, i414, i415, i416, i417, i418, i419, i420, i421, i422, i423, i424, i425, i426, i427, i428, i429, i430, i431, i432, i433, i434, i435, i436, i437, i438, i439, i440, i441, i442, i443, i444, i445, i446, i447, i448, i449, i450, i451, i452, i453, i454, i455, i456, i457, i458, i459, i460, i461, i462, i463, i464, i465, i466, i467, i468, i469, i470, i471, i472, i473, i474, i475, i476, i477, i478, i479, i480, i481, i482, i483, i484, i485, i486, i487, i488, i489, i490, i491, i492, i493, i494, i495, i496, i497, i498, i499, i500, i501, i502, i503, i504, i505, i506, i507, i508, i509, i510, i511, i512, i513, i514, i515, i516, i517, i518, i519, i520, i521, i522, i523, i524, i525, i526, i527, i528, i529, i530, i531, i532, i533, i534, i535, i536, i537, i538, i539, i540, i541, i542, i543, i544, i545, i546, i547, i548, i549, i550, i551, i552, i553, i554, i555, i556, i557, i558, i559, i560, i561, i562, i563, i564, i565, i566, i567, i568, i569, i570, i571, i572, i573, i574, i575, i576, i577, i578, i579, i580, i581, i582, i583, i584, i585, i586, i587, i588, i589, i590, i591, i592, i593, i594, i595, i596, i597, i598, i599, i600, i601, i602, i603, i604, i605, i606, i607, i608, i609, i610, i611, i612, i613, i614, i615, i616, i617, i618, i619, i620, i621, i622, i623, i624, i625, i626, i627, i628, i629, i630, i631, i632, i633, i634, i635, i636, i637, i638, i639, i640, i641, i642, i643, i644, i645, i646, i647, i648, i649, i650, i651, i652, i653, i654, i655, i656, i657, i658, i659, i660, i661, i662, i663, i664, i665, i666, i667, i668, i669, i670, i671, i672, i673, i674, i675, i676, i677, i678, i679, i680, i681, i682, i683, i684, i685, i686, i687, i688, i689, i690, i691, i692, i693, i694, i695, i696, i697, i698, i699, i700, i701, i702, i703, i704, i705, i706, i707, i708, i709, i710, i711, i712, i713, i714, i715, i716, i717, i718, i719, i720, i721, i722, i723, i724, i725, i726, i727, i728, i729, i730, i731, i732, i733, i734, i735, i736, i737, i738, i739, i740, i741, i742, i743, i744, i745, i746, i747, i748, i749, i750, i751, i752, i753, i754, i755, i756, i757, i758, i759, i760, i761, i762, i763, i764, i765, i766, i767, i768, i769, i770, i771, i772, i773, i774, i775, i776, i777, i778, i779, i780, i781, i782, i783, i784, i785, i786, i787, i788, i789, i790, i791, i792, i793, i794, i795, i796, i797, i798, i799, i800, i801, i802, i803, i804, i805, i806, i807, i808, i809, i810, i811, i812, i813, i814, i815, i816, i817, i818, i819, i820, i821, i822, i823, i824, i825, i826, i827, i828, i829, i830, i831, i832, i833, i834, i835, i836, i837, i838, i839, i840, i841, i842, i843, i844, i845, i846, i847, i848, i849, i850, i851, i852, i853, i854, i855, i856, i857, i858, i859, i860, i861, i862, i863, i864, i865, i866, i867, i868, i869, i870, i871, i872, i873, i874, i875, i876, i877, i878, i879, i880, i881, i882, i883, i884, i885, i886, i887, i888, i889, i890, i891, i892, i893, i894, i895, i896, i897, i898, i899, i900, i901, i902, i903, i904, i905, i906, i907, i908, i909, i910, i911, i912, i913, i914, i915, i916, i917, i918, i919, i920, i921, i922, i923, i924, i925, i926, i927, i928, i929, i930, i931, i932, i933, i934, i935, i936, i937, i938, i939, i940, i941, i942, i943, i944, i945, i946, i947, i948, i949, i950, i951, i952, i953, i954, i955, i956, i957, i958, i959, i960, i961, i962, i963, i964, i965, i966, i967, i968, i969, i970, i971, i972, i973, i974, i975, i976, i977, i978, i979, i980, i981, i982, i983, i984, i985, i986, i987, i988, i989, i990, i991, i992, i993, i994, i995, i996, i997, i998, i999) end"
>   : string
let  val i0 = 0; val i1 = 1; val i2 = 2; val i3 = 3; val i4 = i2 * i2; val i5 = 5; val i6 = i2 * i3; val i7 = 7; val i8 = i2 * i2 * i2; val i9 = i3 * i3; val i10 = i2 * i5; val i11 = 11; val i12 = i2 * i2 * i3; val i13 = 13; val i14 = i2 * i7; val i15 = i3 * i5; val i16 = i2 * i2 * i2 * i2; val i17 = 17; val i18 = i2 * i3 * i3; val i19 = 19; val i20 = i2 * i2 * i5; val i21 = i3 * i7; val i22 = i2 * i11; val i23 = 23; val i24 = i2 * i2 * i2 * i3; val i25 = i5 * i5; val i26 = i2 * i13; val i27 = i3 * i3 * i3; val i28 = i2 * i2 * i7; val i29 = 29; val i30 = i2 * i3 * i5; val i31 = 31; val i32 = i2 * i2 * i2 * i2 * i2; val i33 = i3 * i11; val i34 = i2 * i17; val i35 = i5 * i7; val i36 = i2 * i2 * i3 * i3; val i37 = 37; val i38 = i2 * i19; val i39 = i3 * i13; val i40 = i2 * i2 * i2 * i5; val i41 = 41; val i42 = i2 * i3 * i7; val i43 = 43; val i44 = i2 * i2 * i11; val i45 = i3 * i3 * i5; val i46 = i2 * i23; val i47 = 47; val i48 = i2 * i2 * i2 * i2 * i3; val i49 = i7 * i7; val i50 = i2 * i5 * i5; val i51 = i3 * i17; val i52 = i2 * i2 * i13; val i53 = 53; val i54 = i2 * i3 * i3 * i3; val i55 = i5 * i11; val i56 = i2 * i2 * i2 * i7; val i57 = i3 * i19; val i58 = i2 * i29; val i59 = 59; val i60 = i2 * i2 * i3 * i5; val i61 = 61; val i62 = i2 * i31; val i63 = i3 * i3 * i7; val i64 = i2 * i2 * i2 * i2 * i2 * i2; val i65 = i5 * i13; val i66 = i2 * i3 * i11; val i67 = 67; val i68 = i2 * i2 * i17; val i69 = i3 * i23; val i70 = i2 * i5 * i7; val i71 = 71; val i72 = i2 * i2 * i2 * i3 * i3; val i73 = 73; val i74 = i2 * i37; val i75 = i3 * i5 * i5; val i76 = i2 * i2 * i19; val i77 = i7 * i11; val i78 = i2 * i3 * i13; val i79 = 79; val i80 = i2 * i2 * i2 * i2 * i5; val i81 = i3 * i3 * i3 * i3; val i82 = i2 * i41; val i83 = 83; val i84 = i2 * i2 * i3 * i7; val i85 = i5 * i17; val i86 = i2 * i43; val i87 = i3 * i29; val i88 = i2 * i2 * i2 * i11; val i89 = 89; val i90 = i2 * i3 * i3 * i5; val i91 = i7 * i13; val i92 = i2 * i2 * i23; val i93 = i3 * i31; val i94 = i2 * i47; val i95 = i5 * i19; val i96 = i2 * i2 * i2 * i2 * i2 * i3; val i97 = 97; val i98 = i2 * i7 * i7; val i99 = i3 * i3 * i11; val i100 = i2 * i2 * i5 * i5; val i101 = 101; val i102 = i2 * i3 * i17; val i103 = 103; val i104 = i2 * i2 * i2 * i13; val i105 = i3 * i5 * i7; val i106 = i2 * i53; val i107 = 107; val i108 = i2 * i2 * i3 * i3 * i3; val i109 = 109; val i110 = i2 * i5 * i11; val i111 = i3 * i37; val i112 = i2 * i2 * i2 * i2 * i7; val i113 = 113; val i114 = i2 * i3 * i19; val i115 = i5 * i23; val i116 = i2 * i2 * i29; val i117 = i3 * i3 * i13; val i118 = i2 * i59; val i119 = i7 * i17; val i120 = i2 * i2 * i2 * i3 * i5; val i121 = i11 * i11; val i122 = i2 * i61; val i123 = i3 * i41; val i124 = i2 * i2 * i31; val i125 = i5 * i5 * i5; val i126 = i2 * i3 * i3 * i7; val i127 = 127; val i128 = i2 * i2 * i2 * i2 * i2 * i2 * i2; val i129 = i3 * i43; val i130 = i2 * i5 * i13; val i131 = 131; val i132 = i2 * i2 * i3 * i11; val i133 = i7 * i19; val i134 = i2 * i67; val i135 = i3 * i3 * i3 * i5; val i136 = i2 * i2 * i2 * i17; val i137 = 137; val i138 = i2 * i3 * i23; val i139 = 139; val i140 = i2 * i2 * i5 * i7; val i141 = i3 * i47; val i142 = i2 * i71; val i143 = i11 * i13; val i144 = i2 * i2 * i2 * i2 * i3 * i3; val i145 = i5 * i29; val i146 = i2 * i73; val i147 = i3 * i7 * i7; val i148 = i2 * i2 * i37; val i149 = 149; val i150 = i2 * i3 * i5 * i5; val i151 = 151; val i152 = i2 * i2 * i2 * i19; val i153 = i3 * i3 * i17; val i154 = i2 * i7 * i11; val i155 = i5 * i31; val i156 = i2 * i2 * i3 * i13; val i157 = 157; val i158 = i2 * i79; val i159 = i3 * i53; val i160 = i2 * i2 * i2 * i2 * i2 * i5; val i161 = i7 * i23; val i162 = i2 * i3 * i3 * i3 * i3; val i163 = 163; val i164 = i2 * i2 * i41; val i165 = i3 * i5 * i11; val i166 = i2 * i83; val i167 = 167; val i168 = i2 * i2 * i2 * i3 * i7; val i169 = i13 * i13; val i170 = i2 * i5 * i17; val i171 = i3 * i3 * i19; val i172 = i2 * i2 * i43; val i173 = 173; val i174 = i2 * i3 * i29; val i175 = i5 * i5 * i7; val i176 = i2 * i2 * i2 * i2 * i11; val i177 = i3 * i59; val i178 = i2 * i89; val i179 = 179; val i180 = i2 * i2 * i3 * i3 * i5; val i181 = 181; val i182 = i2 * i7 * i13; val i183 = i3 * i61; val i184 = i2 * i2 * i2 * i23; val i185 = i5 * i37; val i186 = i2 * i3 * i31; val i187 = i11 * i17; val i188 = i2 * i2 * i47; val i189 = i3 * i3 * i3 * i7; val i190 = i2 * i5 * i19; val i191 = 191; val i192 = i2 * i2 * i2 * i2 * i2 * i2 * i3; val i193 = 193; val i194 = i2 * i97; val i195 = i3 * i5 * i13; val i196 = i2 * i2 * i7 * i7; val i197 = 197; val i198 = i2 * i3 * i3 * i11; val i199 = 199; val i200 = i2 * i2 * i2 * i5 * i5; val i201 = i3 * i67; val i202 = i2 * i101; val i203 = i7 * i29; val i204 = i2 * i2 * i3 * i17; val i205 = i5 * i41; val i206 = i2 * i103; val i207 = i3 * i3 * i23; val i208 = i2 * i2 * i2 * i2 * i13; val i209 = i11 * i19; val i210 = i2 * i3 * i5 * i7; val i211 = 211; val i212 = i2 * i2 * i53; val i213 = i3 * i71; val i214 = i2 * i107; val i215 = i5 * i43; val i216 = i2 * i2 * i2 * i3 * i3 * i3; val i217 = i7 * i31; val i218 = i2 * i109; val i219 = i3 * i73; val i220 = i2 * i2 * i5 * i11; val i221 = i13 * i17; val i222 = i2 * i3 * i37; val i223 = 223; val i224 = i2 * i2 * i2 * i2 * i2 * i7; val i225 = i3 * i3 * i5 * i5; val i226 = i2 * i113; val i227 = 227; val i228 = i2 * i2 * i3 * i19; val i229 = 229; val i230 = i2 * i5 * i23; val i231 = i3 * i7 * i11; val i232 = i2 * i2 * i2 * i29; val i233 = 233; val i234 = i2 * i3 * i3 * i13; val i235 = i5 * i47; val i236 = i2 * i2 * i59; val i237 = i3 * i79; val i238 = i2 * i7 * i17; val i239 = 239; val i240 = i2 * i2 * i2 * i2 * i3 * i5; val i241 = 241; val i242 = i2 * i11 * i11; val i243 = i3 * i3 * i3 * i3 * i3; val i244 = i2 * i2 * i61; val i245 = i5 * i7 * i7; val i246 = i2 * i3 * i41; val i247 = i13 * i19; val i248 = i2 * i2 * i2 * i31; val i249 = i3 * i83; val i250 = i2 * i5 * i5 * i5; val i251 = 251; val i252 = i2 * i2 * i3 * i3 * i7; val i253 = i11 * i23; val i254 = i2 * i127; val i255 = i3 * i5 * i17; val i256 = i2 * i2 * i2 * i2 * i2 * i2 * i2 * i2; val i257 = 257; val i258 = i2 * i3 * i43; val i259 = i7 * i37; val i260 = i2 * i2 * i5 * i13; val i261 = i3 * i3 * i29; val i262 = i2 * i131; val i263 = 263; val i264 = i2 * i2 * i2 * i3 * i11; val i265 = i5 * i53; val i266 = i2 * i7 * i19; val i267 = i3 * i89; val i268 = i2 * i2 * i67; val i269 = 269; val i270 = i2 * i3 * i3 * i3 * i5; val i271 = 271; val i272 = i2 * i2 * i2 * i2 * i17; val i273 = i3 * i7 * i13; val i274 = i2 * i137; val i275 = i5 * i5 * i11; val i276 = i2 * i2 * i3 * i23; val i277 = 277; val i278 = i2 * i139; val i279 = i3 * i3 * i31; val i280 = i2 * i2 * i2 * i5 * i7; val i281 = 281; val i282 = i2 * i3 * i47; val i283 = 283; val i284 = i2 * i2 * i71; val i285 = i3 * i5 * i19; val i286 = i2 * i11 * i13; val i287 = i7 * i41; val i288 = i2 * i2 * i2 * i2 * i2 * i3 * i3; val i289 = i17 * i17; val i290 = i2 * i5 * i29; val i291 = i3 * i97; val i292 = i2 * i2 * i73; val i293 = 293; val i294 = i2 * i3 * i7 * i7; val i295 = i5 * i59; val i296 = i2 * i2 * i2 * i37; val i297 = i3 * i3 * i3 * i11; val i298 = i2 * i149; val i299 = i13 * i23; val i300 = i2 * i2 * i3 * i5 * i5; val i301 = i7 * i43; val i302 = i2 * i151; val i303 = i3 * i101; val i304 = i2 * i2 * i2 * i2 * i19; val i305 = i5 * i61; val i306 = i2 * i3 * i3 * i17; val i307 = 307; val i308 = i2 * i2 * i7 * i11; val i309 = i3 * i103; val i310 = i2 * i5 * i31; val i311 = 311; val i312 = i2 * i2 * i2 * i3 * i13; val i313 = 313; val i314 = i2 * i157; val i315 = i3 * i3 * i5 * i7; val i316 = i2 * i2 * i79; val i317 = 317; val i318 = i2 * i3 * i53; val i319 = i11 * i29; val i320 = i2 * i2 * i2 * i2 * i2 * i2 * i5; val i321 = i3 * i107; val i322 = i2 * i7 * i23; val i323 = i17 * i19; val i324 = i2 * i2 * i3 * i3 * i3 * i3; val i325 = i5 * i5 * i13; val i326 = i2 * i163; val i327 = i3 * i109; val i328 = i2 * i2 * i2 * i41; val i329 = i7 * i47; val i330 = i2 * i3 * i5 * i11; val i331 = 331; val i332 = i2 * i2 * i83; val i333 = i3 * i3 * i37; val i334 = i2 * i167; val i335 = i5 * i67; val i336 = i2 * i2 * i2 * i2 * i3 * i7; val i337 = 337; val i338 = i2 * i13 * i13; val i339 = i3 * i113; val i340 = i2 * i2 * i5 * i17; val i341 = i11 * i31; val i342 = i2 * i3 * i3 * i19; val i343 = i7 * i7 * i7; val i344 = i2 * i2 * i2 * i43; val i345 = i3 * i5 * i23; val i346 = i2 * i173; val i347 = 347; val i348 = i2 * i2 * i3 * i29; val i349 = 349; val i350 = i2 * i5 * i5 * i7; val i351 = i3 * i3 * i3 * i13; val i352 = i2 * i2 * i2 * i2 * i2 * i11; val i353 = 353; val i354 = i2 * i3 * i59; val i355 = i5 * i71; val i356 = i2 * i2 * i89; val i357 = i3 * i7 * i17; val i358 = i2 * i179; val i359 = 359; val i360 = i2 * i2 * i2 * i3 * i3 * i5; val i361 = i19 * i19; val i362 = i2 * i181; val i363 = i3 * i11 * i11; val i364 = i2 * i2 * i7 * i13; val i365 = i5 * i73; val i366 = i2 * i3 * i61; val i367 = 367; val i368 = i2 * i2 * i2 * i2 * i23; val i369 = i3 * i3 * i41; val i370 = i2 * i5 * i37; val i371 = i7 * i53; val i372 = i2 * i2 * i3 * i31; val i373 = 373; val i374 = i2 * i11 * i17; val i375 = i3 * i5 * i5 * i5; val i376 = i2 * i2 * i2 * i47; val i377 = i13 * i29; val i378 = i2 * i3 * i3 * i3 * i7; val i379 = 379; val i380 = i2 * i2 * i5 * i19; val i381 = i3 * i127; val i382 = i2 * i191; val i383 = 383; val i384 = i2 * i2 * i2 * i2 * i2 * i2 * i2 * i3; val i385 = i5 * i7 * i11; val i386 = i2 * i193; val i387 = i3 * i3 * i43; val i388 = i2 * i2 * i97; val i389 = 389; val i390 = i2 * i3 * i5 * i13; val i391 = i17 * i23; val i392 = i2 * i2 * i2 * i7 * i7; val i393 = i3 * i131; val i394 = i2 * i197; val i395 = i5 * i79; val i396 = i2 * i2 * i3 * i3 * i11; val i397 = 397; val i398 = i2 * i199; val i399 = i3 * i7 * i19; val i400 = i2 * i2 * i2 * i2 * i5 * i5; val i401 = 401; val i402 = i2 * i3 * i67; val i403 = i13 * i31; val i404 = i2 * i2 * i101; val i405 = i3 * i3 * i3 * i3 * i5; val i406 = i2 * i7 * i29; val i407 = i11 * i37; val i408 = i2 * i2 * i2 * i3 * i17; val i409 = 409; val i410 = i2 * i5 * i41; val i411 = i3 * i137; val i412 = i2 * i2 * i103; val i413 = i7 * i59; val i414 = i2 * i3 * i3 * i23; val i415 = i5 * i83; val i416 = i2 * i2 * i2 * i2 * i2 * i13; val i417 = i3 * i139; val i418 = i2 * i11 * i19; val i419 = 419; val i420 = i2 * i2 * i3 * i5 * i7; val i421 = 421; val i422 = i2 * i211; val i423 = i3 * i3 * i47; val i424 = i2 * i2 * i2 * i53; val i425 = i5 * i5 * i17; val i426 = i2 * i3 * i71; val i427 = i7 * i61; val i428 = i2 * i2 * i107; val i429 = i3 * i11 * i13; val i430 = i2 * i5 * i43; val i431 = 431; val i432 = i2 * i2 * i2 * i2 * i3 * i3 * i3; val i433 = 433; val i434 = i2 * i7 * i31; val i435 = i3 * i5 * i29; val i436 = i2 * i2 * i109; val i437 = i19 * i23; val i438 = i2 * i3 * i73; val i439 = 439; val i440 = i2 * i2 * i2 * i5 * i11; val i441 = i3 * i3 * i7 * i7; val i442 = i2 * i13 * i17; val i443 = 443; val i444 = i2 * i2 * i3 * i37; val i445 = i5 * i89; val i446 = i2 * i223; val i447 = i3 * i149; val i448 = i2 * i2 * i2 * i2 * i2 * i2 * i7; val i449 = 449; val i450 = i2 * i3 * i3 * i5 * i5; val i451 = i11 * i41; val i452 = i2 * i2 * i113; val i453 = i3 * i151; val i454 = i2 * i227; val i455 = i5 * i7 * i13; val i456 = i2 * i2 * i2 * i3 * i19; val i457 = 457; val i458 = i2 * i229; val i459 = i3 * i3 * i3 * i17; val i460 = i2 * i2 * i5 * i23; val i461 = 461; val i462 = i2 * i3 * i7 * i11; val i463 = 463; val i464 = i2 * i2 * i2 * i2 * i29; val i465 = i3 * i5 * i31; val i466 = i2 * i233; val i467 = 467; val i468 = i2 * i2 * i3 * i3 * i13; val i469 = i7 * i67; val i470 = i2 * i5 * i47; val i471 = i3 * i157; val i472 = i2 * i2 * i2 * i59; val i473 = i11 * i43; val i474 = i2 * i3 * i79; val i475 = i5 * i5 * i19; val i476 = i2 * i2 * i7 * i17; val i477 = i3 * i3 * i53; val i478 = i2 * i239; val i479 = 479; val i480 = i2 * i2 * i2 * i2 * i2 * i3 * i5; val i481 = i13 * i37; val i482 = i2 * i241; val i483 = i3 * i7 * i23; val i484 = i2 * i2 * i11 * i11; val i485 = i5 * i97; val i486 = i2 * i3 * i3 * i3 * i3 * i3; val i487 = 487; val i488 = i2 * i2 * i2 * i61; val i489 = i3 * i163; val i490 = i2 * i5 * i7 * i7; val i491 = 491; val i492 = i2 * i2 * i3 * i41; val i493 = i17 * i29; val i494 = i2 * i13 * i19; val i495 = i3 * i3 * i5 * i11; val i496 = i2 * i2 * i2 * i2 * i31; val i497 = i7 * i71; val i498 = i2 * i3 * i83; val i499 = 499; val i500 = i2 * i2 * i5 * i5 * i5; val i501 = i3 * i167; val i502 = i2 * i251; val i503 = 503; val i504 = i2 * i2 * i2 * i3 * i3 * i7; val i505 = i5 * i101; val i506 = i2 * i11 * i23; val i507 = i3 * i13 * i13; val i508 = i2 * i2 * i127; val i509 = 509; val i510 = i2 * i3 * i5 * i17; val i511 = i7 * i73; val i512 = i2 * i2 * i2 * i2 * i2 * i2 * i2 * i2 * i2; val i513 = i3 * i3 * i3 * i19; val i514 = i2 * i257; val i515 = i5 * i103; val i516 = i2 * i2 * i3 * i43; val i517 = i11 * i47; val i518 = i2 * i7 * i37; val i519 = i3 * i173; val i520 = i2 * i2 * i2 * i5 * i13; val i521 = 521; val i522 = i2 * i3 * i3 * i29; val i523 = 523; val i524 = i2 * i2 * i131; val i525 = i3 * i5 * i5 * i7; val i526 = i2 * i263; val i527 = i17 * i31; val i528 = i2 * i2 * i2 * i2 * i3 * i11; val i529 = i23 * i23; val i530 = i2 * i5 * i53; val i531 = i3 * i3 * i59; val i532 = i2 * i2 * i7 * i19; val i533 = i13 * i41; val i534 = i2 * i3 * i89; val i535 = i5 * i107; val i536 = i2 * i2 * i2 * i67; val i537 = i3 * i179; val i538 = i2 * i269; val i539 = i7 * i7 * i11; val i540 = i2 * i2 * i3 * i3 * i3 * i5; val i541 = 541; val i542 = i2 * i271; val i543 = i3 * i181; val i544 = i2 * i2 * i2 * i2 * i2 * i17; val i545 = i5 * i109; val i546 = i2 * i3 * i7 * i13; val i547 = 547; val i548 = i2 * i2 * i137; val i549 = i3 * i3 * i61; val i550 = i2 * i5 * i5 * i11; val i551 = i19 * i29; val i552 = i2 * i2 * i2 * i3 * i23; val i553 = i7 * i79; val i554 = i2 * i277; val i555 = i3 * i5 * i37; val i556 = i2 * i2 * i139; val i557 = 557; val i558 = i2 * i3 * i3 * i31; val i559 = i13 * i43; val i560 = i2 * i2 * i2 * i2 * i5 * i7; val i561 = i3 * i11 * i17; val i562 = i2 * i281; val i563 = 563; val i564 = i2 * i2 * i3 * i47; val i565 = i5 * i113; val i566 = i2 * i283; val i567 = i3 * i3 * i3 * i3 * i7; val i568 = i2 * i2 * i2 * i71; val i569 = 569; val i570 = i2 * i3 * i5 * i19; val i571 = 571; val i572 = i2 * i2 * i11 * i13; val i573 = i3 * i191; val i574 = i2 * i7 * i41; val i575 = i5 * i5 * i23; val i576 = i2 * i2 * i2 * i2 * i2 * i2 * i3 * i3; val i577 = 577; val i578 = i2 * i17 * i17; val i579 = i3 * i193; val i580 = i2 * i2 * i5 * i29; val i581 = i7 * i83; val i582 = i2 * i3 * i97; val i583 = i11 * i53; val i584 = i2 * i2 * i2 * i73; val i585 = i3 * i3 * i5 * i13; val i586 = i2 * i293; val i587 = 587; val i588 = i2 * i2 * i3 * i7 * i7; val i589 = i19 * i31; val i590 = i2 * i5 * i59; val i591 = i3 * i197; val i592 = i2 * i2 * i2 * i2 * i37; val i593 = 593; val i594 = i2 * i3 * i3 * i3 * i11; val i595 = i5 * i7 * i17; val i596 = i2 * i2 * i149; val i597 = i3 * i199; val i598 = i2 * i13 * i23; val i599 = 599; val i600 = i2 * i2 * i2 * i3 * i5 * i5; val i601 = 601; val i602 = i2 * i7 * i43; val i603 = i3 * i3 * i67; val i604 = i2 * i2 * i151; val i605 = i5 * i11 * i11; val i606 = i2 * i3 * i101; val i607 = 607; val i608 = i2 * i2 * i2 * i2 * i2 * i19; val i609 = i3 * i7 * i29; val i610 = i2 * i5 * i61; val i611 = i13 * i47; val i612 = i2 * i2 * i3 * i3 * i17; val i613 = 613; val i614 = i2 * i307; val i615 = i3 * i5 * i41; val i616 = i2 * i2 * i2 * i7 * i11; val i617 = 617; val i618 = i2 * i3 * i103; val i619 = 619; val i620 = i2 * i2 * i5 * i31; val i621 = i3 * i3 * i3 * i23; val i622 = i2 * i311; val i623 = i7 * i89; val i624 = i2 * i2 * i2 * i2 * i3 * i13; val i625 = i5 * i5 * i5 * i5; val i626 = i2 * i313; val i627 = i3 * i11 * i19; val i628 = i2 * i2 * i157; val i629 = i17 * i37; val i630 = i2 * i3 * i3 * i5 * i7; val i631 = 631; val i632 = i2 * i2 * i2 * i79; val i633 = i3 * i211; val i634 = i2 * i317; val i635 = i5 * i127; val i636 = i2 * i2 * i3 * i53; val i637 = i7 * i7 * i13; val i638 = i2 * i11 * i29; val i639 = i3 * i3 * i71; val i640 = i2 * i2 * i2 * i2 * i2 * i2 * i2 * i5; val i641 = 641; val i642 = i2 * i3 * i107; val i643 = 643; val i644 = i2 * i2 * i7 * i23; val i645 = i3 * i5 * i43; val i646 = i2 * i17 * i19; val i647 = 647; val i648 = i2 * i2 * i2 * i3 * i3 * i3 * i3; val i649 = i11 * i59; val i650 = i2 * i5 * i5 * i13; val i651 = i3 * i7 * i31; val i652 = i2 * i2 * i163; val i653 = 653; val i654 = i2 * i3 * i109; val i655 = i5 * i131; val i656 = i2 * i2 * i2 * i2 * i41; val i657 = i3 * i3 * i73; val i658 = i2 * i7 * i47; val i659 = 659; val i660 = i2 * i2 * i3 * i5 * i11; val i661 = 661; val i662 = i2 * i331; val i663 = i3 * i13 * i17; val i664 = i2 * i2 * i2 * i83; val i665 = i5 * i7 * i19; val i666 = i2 * i3 * i3 * i37; val i667 = i23 * i29; val i668 = i2 * i2 * i167; val i669 = i3 * i223; val i670 = i2 * i5 * i67; val i671 = i11 * i61; val i672 = i2 * i2 * i2 * i2 * i2 * i3 * i7; val i673 = 673; val i674 = i2 * i337; val i675 = i3 * i3 * i3 * i5 * i5; val i676 = i2 * i2 * i13 * i13; val i677 = 677; val i678 = i2 * i3 * i113; val i679 = i7 * i97; val i680 = i2 * i2 * i2 * i5 * i17; val i681 = i3 * i227; val i682 = i2 * i11 * i31; val i683 = 683; val i684 = i2 * i2 * i3 * i3 * i19; val i685 = i5 * i137; val i686 = i2 * i7 * i7 * i7; val i687 = i3 * i229; val i688 = i2 * i2 * i2 * i2 * i43; val i689 = i13 * i53; val i690 = i2 * i3 * i5 * i23; val i691 = 691; val i692 = i2 * i2 * i173; val i693 = i3 * i3 * i7 * i11; val i694 = i2 * i347; val i695 = i5 * i139; val i696 = i2 * i2 * i2 * i3 * i29; val i697 = i17 * i41; val i698 = i2 * i349; val i699 = i3 * i233; val i700 = i2 * i2 * i5 * i5 * i7; val i701 = 701; val i702 = i2 * i3 * i3 * i3 * i13; val i703 = i19 * i37; val i704 = i2 * i2 * i2 * i2 * i2 * i2 * i11; val i705 = i3 * i5 * i47; val i706 = i2 * i353; val i707 = i7 * i101; val i708 = i2 * i2 * i3 * i59; val i709 = 709; val i710 = i2 * i5 * i71; val i711 = i3 * i3 * i79; val i712 = i2 * i2 * i2 * i89; val i713 = i23 * i31; val i714 = i2 * i3 * i7 * i17; val i715 = i5 * i11 * i13; val i716 = i2 * i2 * i179; val i717 = i3 * i239; val i718 = i2 * i359; val i719 = 719; val i720 = i2 * i2 * i2 * i2 * i3 * i3 * i5; val i721 = i7 * i103; val i722 = i2 * i19 * i19; val i723 = i3 * i241; val i724 = i2 * i2 * i181; val i725 = i5 * i5 * i29; val i726 = i2 * i3 * i11 * i11; val i727 = 727; val i728 = i2 * i2 * i2 * i7 * i13; val i729 = i3 * i3 * i3 * i3 * i3 * i3; val i730 = i2 * i5 * i73; val i731 = i17 * i43; val i732 = i2 * i2 * i3 * i61; val i733 = 733; val i734 = i2 * i367; val i735 = i3 * i5 * i7 * i7; val i736 = i2 * i2 * i2 * i2 * i2 * i23; val i737 = i11 * i67; val i738 = i2 * i3 * i3 * i41; val i739 = 739; val i740 = i2 * i2 * i5 * i37; val i741 = i3 * i13 * i19; val i742 = i2 * i7 * i53; val i743 = 743; val i744 = i2 * i2 * i2 * i3 * i31; val i745 = i5 * i149; val i746 = i2 * i373; val i747 = i3 * i3 * i83; val i748 = i2 * i2 * i11 * i17; val i749 = i7 * i107; val i750 = i2 * i3 * i5 * i5 * i5; val i751 = 751; val i752 = i2 * i2 * i2 * i2 * i47; val i753 = i3 * i251; val i754 = i2 * i13 * i29; val i755 = i5 * i151; val i756 = i2 * i2 * i3 * i3 * i3 * i7; val i757 = 757; val i758 = i2 * i379; val i759 = i3 * i11 * i23; val i760 = i2 * i2 * i2 * i5 * i19; val i761 = 761; val i762 = i2 * i3 * i127; val i763 = i7 * i109; val i764 = i2 * i2 * i191; val i765 = i3 * i3 * i5 * i17; val i766 = i2 * i383; val i767 = i13 * i59; val i768 = i2 * i2 * i2 * i2 * i2 * i2 * i2 * i2 * i3; val i769 = 769; val i770 = i2 * i5 * i7 * i11; val i771 = i3 * i257; val i772 = i2 * i2 * i193; val i773 = 773; val i774 = i2 * i3 * i3 * i43; val i775 = i5 * i5 * i31; val i776 = i2 * i2 * i2 * i97; val i777 = i3 * i7 * i37; val i778 = i2 * i389; val i779 = i19 * i41; val i780 = i2 * i2 * i3 * i5 * i13; val i781 = i11 * i71; val i782 = i2 * i17 * i23; val i783 = i3 * i3 * i3 * i29; val i784 = i2 * i2 * i2 * i2 * i7 * i7; val i785 = i5 * i157; val i786 = i2 * i3 * i131; val i787 = 787; val i788 = i2 * i2 * i197; val i789 = i3 * i263; val i790 = i2 * i5 * i79; val i791 = i7 * i113; val i792 = i2 * i2 * i2 * i3 * i3 * i11; val i793 = i13 * i61; val i794 = i2 * i397; val i795 = i3 * i5 * i53; val i796 = i2 * i2 * i199; val i797 = 797; val i798 = i2 * i3 * i7 * i19; val i799 = i17 * i47; val i800 = i2 * i2 * i2 * i2 * i2 * i5 * i5; val i801 = i3 * i3 * i89; val i802 = i2 * i401; val i803 = i11 * i73; val i804 = i2 * i2 * i3 * i67; val i805 = i5 * i7 * i23; val i806 = i2 * i13 * i31; val i807 = i3 * i269; val i808 = i2 * i2 * i2 * i101; val i809 = 809; val i810 = i2 * i3 * i3 * i3 * i3 * i5; val i811 = 811; val i812 = i2 * i2 * i7 * i29; val i813 = i3 * i271; val i814 = i2 * i11 * i37; val i815 = i5 * i163; val i816 = i2 * i2 * i2 * i2 * i3 * i17; val i817 = i19 * i43; val i818 = i2 * i409; val i819 = i3 * i3 * i7 * i13; val i820 = i2 * i2 * i5 * i41; val i821 = 821; val i822 = i2 * i3 * i137; val i823 = 823; val i824 = i2 * i2 * i2 * i103; val i825 = i3 * i5 * i5 * i11; val i826 = i2 * i7 * i59; val i827 = 827; val i828 = i2 * i2 * i3 * i3 * i23; val i829 = 829; val i830 = i2 * i5 * i83; val i831 = i3 * i277; val i832 = i2 * i2 * i2 * i2 * i2 * i2 * i13; val i833 = i7 * i7 * i17; val i834 = i2 * i3 * i139; val i835 = i5 * i167; val i836 = i2 * i2 * i11 * i19; val i837 = i3 * i3 * i3 * i31; val i838 = i2 * i419; val i839 = 839; val i840 = i2 * i2 * i2 * i3 * i5 * i7; val i841 = i29 * i29; val i842 = i2 * i421; val i843 = i3 * i281; val i844 = i2 * i2 * i211; val i845 = i5 * i13 * i13; val i846 = i2 * i3 * i3 * i47; val i847 = i7 * i11 * i11; val i848 = i2 * i2 * i2 * i2 * i53; val i849 = i3 * i283; val i850 = i2 * i5 * i5 * i17; val i851 = i23 * i37; val i852 = i2 * i2 * i3 * i71; val i853 = 853; val i854 = i2 * i7 * i61; val i855 = i3 * i3 * i5 * i19; val i856 = i2 * i2 * i2 * i107; val i857 = 857; val i858 = i2 * i3 * i11 * i13; val i859 = 859; val i860 = i2 * i2 * i5 * i43; val i861 = i3 * i7 * i41; val i862 = i2 * i431; val i863 = 863; val i864 = i2 * i2 * i2 * i2 * i2 * i3 * i3 * i3; val i865 = i5 * i173; val i866 = i2 * i433; val i867 = i3 * i17 * i17; val i868 = i2 * i2 * i7 * i31; val i869 = i11 * i79; val i870 = i2 * i3 * i5 * i29; val i871 = i13 * i67; val i872 = i2 * i2 * i2 * i109; val i873 = i3 * i3 * i97; val i874 = i2 * i19 * i23; val i875 = i5 * i5 * i5 * i7; val i876 = i2 * i2 * i3 * i73; val i877 = 877; val i878 = i2 * i439; val i879 = i3 * i293; val i880 = i2 * i2 * i2 * i2 * i5 * i11; val i881 = 881; val i882 = i2 * i3 * i3 * i7 * i7; val i883 = 883; val i884 = i2 * i2 * i13 * i17; val i885 = i3 * i5 * i59; val i886 = i2 * i443; val i887 = 887; val i888 = i2 * i2 * i2 * i3 * i37; val i889 = i7 * i127; val i890 = i2 * i5 * i89; val i891 = i3 * i3 * i3 * i3 * i11; val i892 = i2 * i2 * i223; val i893 = i19 * i47; val i894 = i2 * i3 * i149; val i895 = i5 * i179; val i896 = i2 * i2 * i2 * i2 * i2 * i2 * i2 * i7; val i897 = i3 * i13 * i23; val i898 = i2 * i449; val i899 = i29 * i31; val i900 = i2 * i2 * i3 * i3 * i5 * i5; val i901 = i17 * i53; val i902 = i2 * i11 * i41; val i903 = i3 * i7 * i43; val i904 = i2 * i2 * i2 * i113; val i905 = i5 * i181; val i906 = i2 * i3 * i151; val i907 = 907; val i908 = i2 * i2 * i227; val i909 = i3 * i3 * i101; val i910 = i2 * i5 * i7 * i13; val i911 = 911; val i912 = i2 * i2 * i2 * i2 * i3 * i19; val i913 = i11 * i83; val i914 = i2 * i457; val i915 = i3 * i5 * i61; val i916 = i2 * i2 * i229; val i917 = i7 * i131; val i918 = i2 * i3 * i3 * i3 * i17; val i919 = 919; val i920 = i2 * i2 * i2 * i5 * i23; val i921 = i3 * i307; val i922 = i2 * i461; val i923 = i13 * i71; val i924 = i2 * i2 * i3 * i7 * i11; val i925 = i5 * i5 * i37; val i926 = i2 * i463; val i927 = i3 * i3 * i103; val i928 = i2 * i2 * i2 * i2 * i2 * i29; val i929 = 929; val i930 = i2 * i3 * i5 * i31; val i931 = i7 * i7 * i19; val i932 = i2 * i2 * i233; val i933 = i3 * i311; val i934 = i2 * i467; val i935 = i5 * i11 * i17; val i936 = i2 * i2 * i2 * i3 * i3 * i13; val i937 = 937; val i938 = i2 * i7 * i67; val i939 = i3 * i313; val i940 = i2 * i2 * i5 * i47; val i941 = 941; val i942 = i2 * i3 * i157; val i943 = i23 * i41; val i944 = i2 * i2 * i2 * i2 * i59; val i945 = i3 * i3 * i3 * i5 * i7; val i946 = i2 * i11 * i43; val i947 = 947; val i948 = i2 * i2 * i3 * i79; val i949 = i13 * i73; val i950 = i2 * i5 * i5 * i19; val i951 = i3 * i317; val i952 = i2 * i2 * i2 * i7 * i17; val i953 = 953; val i954 = i2 * i3 * i3 * i53; val i955 = i5 * i191; val i956 = i2 * i2 * i239; val i957 = i3 * i11 * i29; val i958 = i2 * i479; val i959 = i7 * i137; val i960 = i2 * i2 * i2 * i2 * i2 * i2 * i3 * i5; val i961 = i31 * i31; val i962 = i2 * i13 * i37; val i963 = i3 * i3 * i107; val i964 = i2 * i2 * i241; val i965 = i5 * i193; val i966 = i2 * i3 * i7 * i23; val i967 = 967; val i968 = i2 * i2 * i2 * i11 * i11; val i969 = i3 * i17 * i19; val i970 = i2 * i5 * i97; val i971 = 971; val i972 = i2 * i2 * i3 * i3 * i3 * i3 * i3; val i973 = i7 * i139; val i974 = i2 * i487; val i975 = i3 * i5 * i5 * i13; val i976 = i2 * i2 * i2 * i2 * i61; val i977 = 977; val i978 = i2 * i3 * i163; val i979 = i11 * i89; val i980 = i2 * i2 * i5 * i7 * i7; val i981 = i3 * i3 * i109; val i982 = i2 * i491; val i983 = 983; val i984 = i2 * i2 * i2 * i3 * i41; val i985 = i5 * i197; val i986 = i2 * i17 * i29; val i987 = i3 * i7 * i47; val i988 = i2 * i2 * i13 * i19; val i989 = i23 * i43; val i990 = i2 * i3 * i3 * i5 * i11; val i991 = 991; val i992 = i2 * i2 * i2 * i2 * i2 * i31; val i993 = i3 * i331; val i994 = i2 * i7 * i71; val i995 = i5 * i199; val i996 = i2 * i2 * i3 * i83; val i997 = 997; val i998 = i2 * i499; val i999 = i3 * i3 * i3 * i37; in (i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, i55, i56, i57, i58, i59, i60, i61, i62, i63, i64, i65, i66, i67, i68, i69, i70, i71, i72, i73, i74, i75, i76, i77, i78, i79, i80, i81, i82, i83, i84, i85, i86, i87, i88, i89, i90, i91, i92, i93, i94, i95, i96, i97, i98, i99, i100, i101, i102, i103, i104, i105, i106, i107, i108, i109, i110, i111, i112, i113, i114, i115, i116, i117, i118, i119, i120, i121, i122, i123, i124, i125, i126, i127, i128, i129, i130, i131, i132, i133, i134, i135, i136, i137, i138, i139, i140, i141, i142, i143, i144, i145, i146, i147, i148, i149, i150, i151, i152, i153, i154, i155, i156, i157, i158, i159, i160, i161, i162, i163, i164, i165, i166, i167, i168, i169, i170, i171, i172, i173, i174, i175, i176, i177, i178, i179, i180, i181, i182, i183, i184, i185, i186, i187, i188, i189, i190, i191, i192, i193, i194, i195, i196, i197, i198, i199, i200, i201, i202, i203, i204, i205, i206, i207, i208, i209, i210, i211, i212, i213, i214, i215, i216, i217, i218, i219, i220, i221, i222, i223, i224, i225, i226, i227, i228, i229, i230, i231, i232, i233, i234, i235, i236, i237, i238, i239, i240, i241, i242, i243, i244, i245, i246, i247, i248, i249, i250, i251, i252, i253, i254, i255, i256, i257, i258, i259, i260, i261, i262, i263, i264, i265, i266, i267, i268, i269, i270, i271, i272, i273, i274, i275, i276, i277, i278, i279, i280, i281, i282, i283, i284, i285, i286, i287, i288, i289, i290, i291, i292, i293, i294, i295, i296, i297, i298, i299, i300, i301, i302, i303, i304, i305, i306, i307, i308, i309, i310, i311, i312, i313, i314, i315, i316, i317, i318, i319, i320, i321, i322, i323, i324, i325, i326, i327, i328, i329, i330, i331, i332, i333, i334, i335, i336, i337, i338, i339, i340, i341, i342, i343, i344, i345, i346, i347, i348, i349, i350, i351, i352, i353, i354, i355, i356, i357, i358, i359, i360, i361, i362, i363, i364, i365, i366, i367, i368, i369, i370, i371, i372, i373, i374, i375, i376, i377, i378, i379, i380, i381, i382, i383, i384, i385, i386, i387, i388, i389, i390, i391, i392, i393, i394, i395, i396, i397, i398, i399, i400, i401, i402, i403, i404, i405, i406, i407, i408, i409, i410, i411, i412, i413, i414, i415, i416, i417, i418, i419, i420, i421, i422, i423, i424, i425, i426, i427, i428, i429, i430, i431, i432, i433, i434, i435, i436, i437, i438, i439, i440, i441, i442, i443, i444, i445, i446, i447, i448, i449, i450, i451, i452, i453, i454, i455, i456, i457, i458, i459, i460, i461, i462, i463, i464, i465, i466, i467, i468, i469, i470, i471, i472, i473, i474, i475, i476, i477, i478, i479, i480, i481, i482, i483, i484, i485, i486, i487, i488, i489, i490, i491, i492, i493, i494, i495, i496, i497, i498, i499, i500, i501, i502, i503, i504, i505, i506, i507, i508, i509, i510, i511, i512, i513, i514, i515, i516, i517, i518, i519, i520, i521, i522, i523, i524, i525, i526, i527, i528, i529, i530, i531, i532, i533, i534, i535, i536, i537, i538, i539, i540, i541, i542, i543, i544, i545, i546, i547, i548, i549, i550, i551, i552, i553, i554, i555, i556, i557, i558, i559, i560, i561, i562, i563, i564, i565, i566, i567, i568, i569, i570, i571, i572, i573, i574, i575, i576, i577, i578, i579, i580, i581, i582, i583, i584, i585, i586, i587, i588, i589, i590, i591, i592, i593, i594, i595, i596, i597, i598, i599, i600, i601, i602, i603, i604, i605, i606, i607, i608, i609, i610, i611, i612, i613, i614, i615, i616, i617, i618, i619, i620, i621, i622, i623, i624, i625, i626, i627, i628, i629, i630, i631, i632, i633, i634, i635, i636, i637, i638, i639, i640, i641, i642, i643, i644, i645, i646, i647, i648, i649, i650, i651, i652, i653, i654, i655, i656, i657, i658, i659, i660, i661, i662, i663, i664, i665, i666, i667, i668, i669, i670, i671, i672, i673, i674, i675, i676, i677, i678, i679, i680, i681, i682, i683, i684, i685, i686, i687, i688, i689, i690, i691, i692, i693, i694, i695, i696, i697, i698, i699, i700, i701, i702, i703, i704, i705, i706, i707, i708, i709, i710, i711, i712, i713, i714, i715, i716, i717, i718, i719, i720, i721, i722, i723, i724, i725, i726, i727, i728, i729, i730, i731, i732, i733, i734, i735, i736, i737, i738, i739, i740, i741, i742, i743, i744, i745, i746, i747, i748, i749, i750, i751, i752, i753, i754, i755, i756, i757, i758, i759, i760, i761, i762, i763, i764, i765, i766, i767, i768, i769, i770, i771, i772, i773, i774, i775, i776, i777, i778, i779, i780, i781, i782, i783, i784, i785, i786, i787, i788, i789, i790, i791, i792, i793, i794, i795, i796, i797, i798, i799, i800, i801, i802, i803, i804, i805, i806, i807, i808, i809, i810, i811, i812, i813, i814, i815, i816, i817, i818, i819, i820, i821, i822, i823, i824, i825, i826, i827, i828, i829, i830, i831, i832, i833, i834, i835, i836, i837, i838, i839, i840, i841, i842, i843, i844, i845, i846, i847, i848, i849, i850, i851, i852, i853, i854, i855, i856, i857, i858, i859, i860, i861, i862, i863, i864, i865, i866, i867, i868, i869, i870, i871, i872, i873, i874, i875, i876, i877, i878, i879, i880, i881, i882, i883, i884, i885, i886, i887, i888, i889, i890, i891, i892, i893, i894, i895, i896, i897, i898, i899, i900, i901, i902, i903, i904, i905, i906, i907, i908, i909, i910, i911, i912, i913, i914, i915, i916, i917, i918, i919, i920, i921, i922, i923, i924, i925, i926, i927, i928, i929, i930, i931, i932, i933, i934, i935, i936, i937, i938, i939, i940, i941, i942, i943, i944, i945, i946, i947, i948, i949, i950, i951, i952, i953, i954, i955, i956, i957, i958, i959, i960, i961, i962, i963, i964, i965, i966, i967, i968, i969, i970, i971, i972, i973, i974, i975, i976, i977, i978, i979, i980, i981, i982, i983, i984, i985, i986, i987, i988, i989, i990, i991, i992, i993, i994, i995, i996, i997, i998, i999) end;
> val it =
>   (0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,
>    29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,
>    54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,
>    79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,
>    103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,
>    122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,
>    141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,
>    160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,
>    179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,
>    198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,
>    217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,
>    236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,
>    255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,
>    274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,
>    293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,
>    312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,
>    331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,
>    350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,
>    369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,
>    388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,
>    407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,
>    426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,
>    445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,
>    464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,
>    483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,
>    502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,
>    521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,
>    540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,
>    559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,
>    578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,
>    597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,
>    616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,
>    635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,
>    654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,
>    673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,
>    692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,
>    711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,
>    730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,
>    749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,
>    768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,
>    787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,
>    806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,
>    825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,
>    844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,
>    863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,
>    882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,
>    901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,
>    920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,
>    939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,
>    958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,
>    977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,
>    996,997,998,999)
>   : int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int *
>     int * int * int * int * int * int * int * int * int * int * int * int * int
>      * int * int * int * int * int * int * int * int * int * int * int * int

(*) End type.smli
