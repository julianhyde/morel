(*
 * Licensed to Julian Hyde under one or more contributor license
 * agreements.  See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Julian Hyde licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License.  You may obtain a
 * copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.  See the License for the specific
 * language governing permissions and limitations under the
 * License.
 *)
(*) Closure
(*
let
  fun f x = 1 + x;
  val x = f 2;
  fun f y = x + y;
  val x = 10
in
  f x
end;
> val it = 13 : int

fun isEmp e =
  e elem scott.emp;
> val isEmp = fn
>   :
>      {comm:real, deptno:int, empno:int, ename:string, hiredate:string,
>       job:string, mgr:int, sal:real} -> bool
from e
  where isEmp e andalso e.deptno = 20
  yield e.ename;
> val it = ["SMITH","JONES","SCOTT","ADAMS","FORD"] : string list

(*) 'yield' uses 'case' to deconstruct a tuple
from p in [(1, 2), (3, 5)]
  yield case p of (x, y) => {x, y};
> val it = [{x=1,y=2},{x=3,y=5}] : {x:int, y:int} list

(*) 'yield' uses 'case' to deconstruct a record
from p in [{x = 1, y = 2}, {x = 3, y = 5}]
  yield case p of {x=x, y=y} => (x, y);
> val it = [(1,2),(3,5)] : (int * int) list
*)

(*) Three different kinds of 'max'
fun max_alpha (x, y) = if x < y then y else x;
> val max_alpha = fn : 'a * 'a -> 'a
max_alpha (2, 3);
> val it = 3 : int

(*) End dummy.smli
