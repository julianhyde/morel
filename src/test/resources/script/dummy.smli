(*
 * Licensed to Julian Hyde under one or more contributor license
 * agreements.  See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Julian Hyde licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License.  You may obtain a
 * copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.  See the License for the specific
 * language governing permissions and limitations under the
 * License.
 *)

(* A type similar to the built-in 'bag', and a function to convert any list to
   a multiset. *)
datatype 'a multiset =
    MULTI_NIL
  | MULTI_CONS of ('a * 'a multiset);
> datatype 'a multiset = MULTI_CONS of 'a * 'a multiset | MULTI_NIL
fun listToMultiset [] = MULTI_NIL
  | listToMultiset (h :: t) = MULTI_CONS (h, listToMultiset t);
> val listToMultiset = fn : 'a list -> 'a multiset

(* Declare that 'unsort' is overloaded. *)
over unsort;
> over unsort

val inst unsort = fn SOME x => [x] | NONE => [];
> val unsort = fn : 'a option -> 'a list
unsort (SOME 1);
> val it = [1] : int list

(* Declare an instance of 'unsort' that converts a list to a multiset. *)
val inst unsort = fn aList => listToMultiset aList;
> val unsort = fn : 'a list -> 'a multiset
unsort [1, 2];
> val it = MULTI_CONS (1,MULTI_CONS (2,MULTI_NIL)) : int multiset

(* Clear the environment. The number of variables in the environment
 * can cause subtle differences in behavior, so we eliminate that
 * source of variability. *)
Sys.clearEnv ();
> val it = () : unit

over o4a;
> over o4a
val inst o4a = fn NONE => [] | SOME x => [x];
> val o4a = fn : 'a option -> 'a list
val inst o4a = fn list => List.null list;
> val o4a = fn : 'a list -> bool
(* TODO
o4a;
> val it = fn : 'a list -> bool
*)
o4a (SOME 1);
> val it = [1] : int list
o4a ["a"];
> val it = false : bool

(*) End dummy.smli
