(*
 * Licensed to Julian Hyde under one or more contributor license
 * agreements.  See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Julian Hyde licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License.  You may obtain a
 * copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.  See the License for the specific
 * language governing permissions and limitations under the
 * License.
 *
 * Tests the "idempotent mode" for test scripts.
 *)

"a string";
> val it = "a string" : string

(* A multi-line comment
   not followed by a statement. *)

(*) Composite declarations
val x = 5
 and y = 6;
> val x = 5 : int
> val y = 6 : int

(*) In a declaration, don't print 'it' unless it is explicitly mentioned.
val (x, y) = (5, 6);
> val x = 5 : int
> val y = 6 : int

(*) 'it' is explicitly mentioned, so print it.
val it as (x, y) = (5, 6);
> val it = (5,6) : int * int
> val x = 5 : int
> val y = 6 : int

(*) Assigning to 'it' generates feedback, just like any other variable.
val it = 3;
> val it = 3 : int

3;
> val it = 3 : int

(5, 6);
> val it = (5,6) : int * int
val it = (5, 6);
> val it = (5,6) : int * int

(*) An expression with '>' near the start of the line
val gt = 3
 > 2;
> val gt = true : bool

(* Output lines in comments should not be touched.
   It's pretty important, because it allows us to comment out code
   and expected results.
val x = 10 - 1;
> val x = 9 : int
*)

(*) End idempotent.smli
